#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language polish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 4
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
Bielska Wyższa Szkoła
\begin_inset Newline newline
\end_inset

im.
 Józefa Tyszkiewicza 
\begin_inset Newline newline
\end_inset

w Bielsku-Białej
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.3in
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/mczyz/bwsb.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Praca Dyplomowa
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Michał Czyż
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Temat Pracy: Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Opiekun
\begin_inset space ~
\end_inset

pracy: dr.
 M.
 Smołka
\end_layout

\begin_layout Description
\paragraph_spacing single
Ocena
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

albumu: 2288
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

ewidencyjny
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Bielsko-Biała, 2009
\end_layout

\begin_layout Standard

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\align right
Bielsko-Biała dn.
 15 lutego 2009
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Imię
\begin_inset space ~
\end_inset

i
\begin_inset space ~
\end_inset

nazwisko: Michał Czyż
\end_layout

\begin_layout Description
\paragraph_spacing single
Nr
\begin_inset space ~
\end_inset

albumu: 2288 
\end_layout

\begin_layout Description
\paragraph_spacing single
Wydział: Zarządzania i Informatyki 
\end_layout

\begin_layout Description
\paragraph_spacing single
Kierunek: Inżynieria Oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
OŚWIADCZENIE
\end_layout

\begin_layout Standard
Świadom odpowiedzialności prawnej oświadczam, że złożona praca inżynierska
 pt.: 
\series bold
Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\series default
 została napisana przeze mnie samodzielnie.
 
\end_layout

\begin_layout Standard
Równocześnie oświadczam, że praca ta nie narusza prawa autorskiego w rozumieniu
 ustawy z dnia 4 lutego 1994 roku o prawie autorskim i prawach pokrewnych
 (Dz.U.1994 nr 24 poz.
 83) oraz dóbr osobistych chronionych prawem cywilnym.
\end_layout

\begin_layout Standard
Ponadto praca nie zawiera informacji i danych uzyskanych w sposób nielegalny
 i nie była wcześniej przedmiotem innych procedur urzędowych związanych
 z uzyskaniem dyplomów lub tytułów zawodowych uczelni wyższej.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Section
Wstęp
\end_layout

\begin_layout Standard
Właściwe pozyskiwanie i przetwarzanie wymagań od klienta, ma kluczowe znaczenie
 w procesie produkcji oprogramowania.
 Jest to niełatwe zadanie, a wpływ na to ma wiele czynników.
 Jedny z powodów jest niejednolity język którym posługują się klienci a
 developerzy.
 Zamawiający mają problem z artykułowaniem swoich oczekiwań, a developerzy
 często im w tym nie pomagają.
 Powstają w ten sposób systemy które nie spełniają w pełni oczekiwań funkcjonaln
ych, bądź są trudne w obsłudze, albo wręcz nie nadają się do jakiekolwiek
 zastosowania i ladują symbolicznie rzecz biorąc w koszu.
\end_layout

\begin_layout Standard
Problemy tego typu stara się rozwiąć Inżynieria Oprogramowania, na przełomie
 ostatnich 30 lat pojawiły się różne metodologie, czy też teorie które porządkow
ały proces produkcji oprogramowania.
 Jednak jak uargumentował Brooks w artykule 'No Silver Bullet - Essence
 and Accidents of Software Engineering'
\begin_inset CommandInset citation
LatexCommand cite
key "There.is.no.silver.bullet"

\end_inset

 z 1986 roku, nie ma i nie będzie srebrnej kuli, jeśli chodzi o metodologie
 zarządzania produckją oprogramowania.
 Zwraca to naszą uwagę na fakt że tworzenie oprogramowania jest trudne i
 wymaga czegoś więcej niż formalnej struktury pracy, czy też listy kroków
 za którymi wystarczy podążać.
\end_layout

\begin_layout Standard
Pewne metodologie - np.: model kaskadowy - przez swoją niską skuteczność
 zostały już uznane przez wielu jako nieskuteczne
\begin_inset CommandInset citation
LatexCommand cite
key "AlanCooper.every.7.years,WaterfallDoesntWork"

\end_inset

.
 Jeśli coś nie spełnia swojej roli, zaczynają się poszukiwania i eksperymenty
 nad nowymi koncepcjami.
 Od lat siedemdziesiątych wiele się zmieniło, developerzy zrozumieli że
 narzędzie nie rozwiażą tego problemu, wymagana jest natomiast zmiana w
 podejsciu do kliena, która wymusza aby był on członkiem zespołu projektowego.
 Aby oprogramowanie było efektem silnej współpracy której celem jest jak
 najlepszy produkt.
 Jednak aby to było możliwe potrzeba wskazówek którymi należy sie kierować.
 Trzeba umieć uargumentować klientowi że taki model współpracy da najlepsze
 efekty.
\end_layout

\begin_layout Standard
Pomiędzy 11 a 14 Lutego 2001 przedstawiciele
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Authors"

\end_inset

 wielu idei jak extreme programming - Kent Beck, pragmatic programing -
 Dave Thomas, Andrew Hunt, SCRUM - Jeff Sutterland, crystal clear - Alistair
 Cockburn, adaptive software development - Jim Highsmith, oraz 11 innych
 doświadczonych programistów którzy podpisali się pod 'Agile Manifesto'
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto"

\end_inset

.
 Zwrócili uwagę na cztery największe wartości o których należy pamietać
 w trakcie produkcji oprogramowania, a brzmi on:
\end_layout

\begin_layout Quote
Poprzez wytwarzanie oprogramowania oraz pomaganie innym w tym zakresie odkrywamy
 lepsze sposoby realizowania tej pracy.
 W wyniku tych doświadczeń zaczęliśmy przedkładać: 
\end_layout

\begin_layout Quote

\emph on
Jednostki i współdziałania między nimi 
\emph default
nad procesy i narzędzia.
 
\end_layout

\begin_layout Quote

\emph on
Działające oprogramowanie
\emph default
 nad dokładną dokumentację.
 
\end_layout

\begin_layout Quote

\emph on
Współpracę z klientem
\emph default
 nad negocjację umów.
 
\end_layout

\begin_layout Quote

\emph on
Reagowanie na zmiany
\emph default
 nad realizowanie planu.
\end_layout

\begin_layout Quote
Oznacza to, że wprawdzie doceniamy to co wymieniono po prawej stornie to
 jednak bardziej cenimy to co wymieniono po lewej.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Tlumaczenie"

\end_inset


\end_layout

\begin_layout Standard
Sam manifest przykuwa uwagę że bycie zwinnym
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Agile (zwinny), w pracy na przemian będzie używany oryginał oraz polskie
 tłumaczenie
\end_layout

\end_inset

 jest nacelowane na proces oraz ludzi a nie na narzędzia i technologie.
 Aczkolwiek zrozumienie procesu jak i wdrożenia go efektywnie wymaga poznanie
 wiele wiecej, prezentacja tej filozofi wraz z przykładem użycia przy produkcji
 - zwłaszcza aplikacji webowych - jest jednym z celów tej pracy.
 
\end_layout

\begin_layout Standard
Drugim celem jest prezentacja narzedzia które ma za zadanie wspierać proces
 pozyskiwania wymagań od klienta, udostępniając zaledwie trzy główne funkcjnalno
ści.
 A są to:
\end_layout

\begin_layout Itemize
przechowywać opowieści użytkownika
\end_layout

\begin_layout Itemize
udostępniąć historie zmian na tych opowieściach użytkownika
\end_layout

\begin_layout Itemize
wspierać pisanie automatycznych testów integracyjnych
\end_layout

\begin_layout Standard
Dzięki tym trzem funkcjonalnością jest możliwe jesne zarządzaniem wymaganiami
 klienta, wykazywanie jakie zmiany następiły.
 Daje to obraz jaka ilość pracy została wykonana dodatkowo co umożliwi lepsze
 rozliczanie pracy.
 Kolejnym celem jest wykazanie jak dużo lepszy jest efekt końcowy od pierwotnego
 - co wpłynie na zadowolenie klienta.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Streszczenie
\end_layout

\begin_layout Standard
W pierwszej części zostanie zwrócona uwaga na podstawy teoretyczne związane
 z zarządzaniem projektów.
 Krótko zostaną przedstawione metody tradycyjne, zwane też 'cięzkimi', takie
 jak model kaskadowy, czy też spiralny.
 Następnie zwrócona zostanie uwaga na metody zgodne z filozofią agile potocznie
 zwane 'lekkimi'.
 Kolejną sprawą będzie przedstawienie czterech wartości z manifestu agile,
 oraz uzupełniających ich zasad wraz z praktycznymi przykładami.
 Zostaną wydzielone fazy produkcji oprogramowania które są agile a które
 fragile.
 Rozważone zostaną trzy główne metodologie związane z filozofią agile.
 Na koniec tej części nastąpi porównanie metod 'lekkich' z 'ciężkimi'.
\end_layout

\begin_layout Standard
Aby móc być 'zwinnym' podczas procesu produkcji oprogramowania warto wybierać
 odpowiednie narzędzia których sie wybiera nie jest to niezbędne aczkolwiek
 daje nam to wiekszą efektywność w czasie pracy.
 Opisane zostaną wzorce projektowe które stymulują podejmowanie właściwy
 decyzji przy projektowaniu architektury systemu.
 Zwrócona zostanie uwaga na dynamiczny i funkcyjny język jakim jest Ruby
\begin_inset CommandInset citation
LatexCommand cite
key "Ruby.homepage"

\end_inset

.
 Kolejną zostaną omówione środowisko do budowy aplikacji webowych Ruby on
 Rails
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.homepage"

\end_inset

.
 Następnie zwrócona będzie uwaga na biblioteki wspierające pisanie automatycznyc
h testów wraz z narzędziami do masowego tworzenia danych testowych.
\end_layout

\begin_layout Standard
Trzecia częśc będzie prezentacja koncepcji związanych z narządziem wspomnianym
 na wstępię.
 Zaprezentowane zostaną wymagania dotyczące tego projektu opisane za pomacą
 opowieści użytkownika - technika ta będzie opisana w sekcjach poświeconych
 BDD i Cucumber.
 Kolejno zostanie zwrócona uwaga na rozwiazania od strony technicznej zwiazane
 z tą aplikacją.
\end_layout

\begin_layout Standard
Ostatnim etapem będzie prezentacja samego narzędzia.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Zarządzanie projektem
\end_layout

\begin_layout Standard
Każda metodologia ma na celu ulepszenie procesu produkcji oprogramowania.
 Celem jest dostarczanie produktu który spełni oczekiwania użytkownika końcowego.
 Model zarządzanie powinniem ułatwać szacowania czasu potrzebnego na powstanie
 systemu oraz kosztów lub umożliwić wykonanie jak największej ilości pracy
 w danym budżecie.
 Wymaga to pewnej formalizacji wymagań, oraz rejestrowania postępów, dzięki
 której developerzy wiedzą ki wszystko jest już zrobione.
 Zwrócona zostanie teraz uwaga na kilka takich modeli.
\end_layout

\begin_layout Subsection
Metody tradycyjne
\end_layout

\begin_layout Standard
Metody tradycyjne zwane też 'ciężkimi' zawdzięczają taki przydomek ilości
 dokumentacji która jest tworzona przed rozpoczęciem prac implementacyjnych,
 często określane jako BDUF
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Big Design Up Front
\end_layout

\end_inset

.
 Argumentacją takiego podejścia jest przeświadczenie że solidna dokumentacja
 niesie ze sobą sukces projektu oraz pozwala też uniknąć kosztu zmiany,
 gdyż zmiejsza prawdopodobieństwo pojawienia się zmian w trakcie implementacji.
 Zwróćmy uwagę na dwa najpopularniejsze modele.
\end_layout

\begin_layout Subsubsection
Model Kaskadowy
\end_layout

\begin_layout Standard
Model Kaskadowy
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Waterfall model - z języka angielskiego
\end_layout

\end_inset

 został w opisany przez Winstona W.
 Royce w roku 1970 roku w artykule 'Zarządzanie produkcją dużych systemów
 informatycznych'
\begin_inset CommandInset citation
LatexCommand cite
key "Waterfall.introduction"

\end_inset

.
 Choć on sam nie użył tej nazwy, to jednak jest to najbardziej znany dokument
 opisujący ten.
 Royce w żadnym wypadku nie chwali takie podejście, a raczej je krytykuje
 jako nieskutecznei nieefektowne.
 Głównym założeniem tej metodologi jest podział produkcji oprogramowania
 na sześć niepodzielny faz:
\end_layout

\begin_layout Itemize
Specyfikacja wymagań funkcjonalnych
\end_layout

\begin_layout Itemize
Analiza systemu
\end_layout

\begin_layout Itemize
Modelowanie systemu, rozwiązań
\end_layout

\begin_layout Itemize
Implementacja
\end_layout

\begin_layout Itemize
Testy jednostkowe, oraz integracyjne
\end_layout

\begin_layout Itemize
Wdrożenie i pielęgnacja systemu
\end_layout

\begin_layout Standard
Przejście do kolejnej fazy jest możliwy tylko i wyłącznie po ukończenie
 aktualnej.
 Jeżeli na kolejnym etapie pojawią się problemy związane z niedopatrzeniami
 w którejś z poprzednich faz należy się wrócić, wykonać jeszcze wszystkie
 w kolejności i tak aż do skutku.
 Oprogramowanie jest wdrażane gdy ostatnia faza da zadawalający efekt, jest
 to zazwyczaj długi okres czasu około jednego roku.
\end_layout

\begin_layout Subsubsection
Model Spiralny
\end_layout

\begin_layout Standard
Model spiralny
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Spiral Model - z języka angielskiego
\end_layout

\end_inset

 zdefiniował Barry Boehm w artykule 'Model Spiralny w produkcji oprogramowania
 i usprawnienia'
\begin_inset CommandInset citation
LatexCommand cite
key "SpiralModel.introduction"

\end_inset

 z 1988 roku.
 Boehm podzieł proces produkcji oprogramowania na cztery iteracyjne fazy:
\end_layout

\begin_layout Itemize
Specyfikowanie systemu wraz z detalami, ustalenie celów
\end_layout

\begin_layout Itemize
Analiza ryzyka oraz prototypowanie
\end_layout

\begin_layout Itemize
Implementacja, zawierająca 
\end_layout

\begin_deeper
\begin_layout Itemize
przygotowanie szczegółowych koncepcji
\end_layout

\begin_layout Itemize
programowanie
\end_layout

\begin_layout Itemize
intergrowanie z istniejąca częścią systemu
\end_layout

\begin_layout Itemize
testowanie
\end_layout

\begin_layout Itemize
odbiór
\end_layout

\end_deeper
\begin_layout Itemize
Analiza zakończonej iteracji i planowanie następnej
\end_layout

\begin_layout Standard
Specyfikacja modelu iteracyjnego nie narzuca jedynej takich etapów w fazie
 trzeciej, można tutaj użyć modelu kaskadowego.
 Każda iteracja jest swego rodzaju somdzielna, może rozpocząc się na juz
 prowadzonym projekcie, a po jej zakonczenie wszystkie zmiany które miały
 zostać osiągnięte są wdrożone w działający system.
 Zazwyczaj iteracja trwa od jednego do trzech miesięcy, jest krótsza niż
 w modelu kaskadowym
\end_layout

\begin_layout Subsection
Filozofia Agile
\end_layout

\begin_layout Standard
Jak wykazano we wstepnie filozofia agile jest inna, jest pierwszą która
 kieruje uwagę na dostosowyanie się do konkretnego projektu klienta, i bycia
 elastycznym.
 Bardzo klarowny jest przekaz manifestu agile ( wartości które są najistoniejsze
, wymienione są jeszcze raz poniżej).
 Poniżej 12 zasad które uzupełniają sam manifest.
\end_layout

\begin_layout Standard
\align center

\series bold
Największe wartości Agile
\end_layout

\begin_layout Quote
\align center

\emph on
Jednostki i współdziałania między nimi
\emph default
 
\end_layout

\begin_layout Quote
\align center

\emph on
Działające oprogramowanie
\end_layout

\begin_layout Quote
\align center

\emph on
Współpraca z klientem
\end_layout

\begin_layout Quote
\align center

\emph on
Reagowanie na zmiany
\end_layout

\begin_layout Standard
\align center

\series bold
Zasady Agile
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset


\end_layout

\begin_layout Quote
\align center
Najważniejsze jest zadowolenie klienta 
\begin_inset Newline newline
\end_inset

poprzez wczesne i ciagłe dostarczanie wartościowego oprogramowania.
\end_layout

\begin_layout Quote
\align center
Zmiany w wymaganiach są mile wiedziane, nawet na późnym
\begin_inset Newline newline
\end_inset

 etapie prac.
 Proces agile radzi sobie ze zmianą 
\begin_inset Newline newline
\end_inset

przez względ na korzyść dla klienta.
\end_layout

\begin_layout Quote
\align center
Dostarczać działający system często, 
\begin_inset Newline newline
\end_inset

czy to co kilka tygodni czy też miesięcy, 
\begin_inset Newline newline
\end_inset

z naciskiem na krótsze okresy.
\end_layout

\begin_layout Quote
\align center
Ludzie biznesu i developerzy muszą codziennie 
\begin_inset Newline newline
\end_inset

pracować razem przez cały okres projektu.
\end_layout

\begin_layout Quote
\align center
Prace na projektem należy połączyć z motywacją jednostek.
 
\begin_inset Newline newline
\end_inset

Zapewnij im środowisko pracy oraz wsparcie jakiego potrzebują.
 
\begin_inset Newline newline
\end_inset

Obdarz ich zaufaniem że wykonają pracę jak należy.
\end_layout

\begin_layout Quote
\align center
Najbardziej wydajną i efektowną metodą 
\begin_inset Newline newline
\end_inset

przekazu informacji dla zespołu oraz dla klienta
\begin_inset Newline newline
\end_inset

jest rozmowa twarzą w twarz.
\end_layout

\begin_layout Quote
\align center
Główną miarą postępu jest działające oprogramowanie.
\end_layout

\begin_layout Quote
\align center
Proces Agile promuje ciągły niczym nieprzerwany proces 
\begin_inset Newline newline
\end_inset

developemntu.
 Inwestorzy, developerzy oraz użytkownicy powinni 
\begin_inset Newline newline
\end_inset

zabiegać <constant pace indefinitely>.
\end_layout

\begin_layout Quote
\align center
Zwracanie ciągłej uwagi na techniczny kunszt 
\begin_inset Newline newline
\end_inset

oraz dobre projektowanie wspiera bycie zwinnym.
\end_layout

\begin_layout Quote
\align center
Prostota - czyli sztuka maksymalizacji ilości pracy 
\begin_inset Newline newline
\end_inset

która nie jest wykonana - jest wymagana.
\end_layout

\begin_layout Quote
\align center
Najlepsze architektury, wymagania oraz projekty 
\begin_inset Newline newline
\end_inset

pochodzą od zespołów które same sobą zarządzają.
\end_layout

\begin_layout Quote
\align center
W równych odstępach czasowych, zespół analizuje w jaki 
\begin_inset Newline newline
\end_inset

sposób stać się bardziej efektywny, następie zgodnie ze spostrzeżeniami
\begin_inset Newline newline
\end_inset

adaptuje zmiany we własnym zachowaniu.
\end_layout

\begin_layout Standard
Powyższe zasad i wartości warto mieć zawsze w pamięci jeśli chcemy pozstać
 w z zgodzie z filozofią agile.
 Na podstawie tych reguł powstało wiele zasad i metodologii które wdrażane
 wraz z dostosowaniem do możliwości zespołu i charakteru projektu daję dobre
 efekty.
\end_layout

\begin_layout Subsubsection
Reguły usprawniające proces
\end_layout

\begin_layout Standard
Reguły wymienione poniżej są bardzo proste ale gdy dobrze je zrozumieniemy
\end_layout

\begin_layout Paragraph
Nie powtarzaj się
\end_layout

\begin_layout Standard
Druga zasada Agile, zwraca traktuje zmiany jako mile widziane na każdym
 etapie pracy, nawet na tym bardzo zaawansowanym.
 Wymaga to częstych zmian w kodzie źródłowym.
 Jedną z zasad która ułatwia taki cykl obróbki kodu - czasem wręcz tylko
 dzięki stosowaniu się do niej jest to możliwe - jest unikanie duplikacji
 kodu.
 Pomocna przy tym jest reguła DRY
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't Repeat Yourself, znana również jako Single Point of Truth.
 Popularny akronim DRY
\end_layout

\end_inset

 przez wielu odczytywana jako unikanie powtórzeń w kodzie.
 Jak zwrócił Dave Thomas
\begin_inset CommandInset citation
LatexCommand cite
key "DRY.Interview.With.Dave.Thomas"

\end_inset

 to nie jest prawdziwy cel tej reguły, jej sednem jest aby każda cześc wiedzy
 - zachowania - systemu miała jedną autoratywną i jednoznaczną reprezentacje.
 Wiedza na temat systemu jak zwrócił w wywiadzie wychodzi ponad sam kod
 aplikacji, dotyczy ona schamatu baz danych, kwesti testów a nawet dokumentacji.
 Czasem aby móc osiągnać taki stan potrzebne są generatory kodu wiążace
 się z zawansowanymi technikami meteprogramowania lecz własnie dzieki stosowaniu
 się to tej reguły jesteśmy wstanie uzystkać elastyczny i dający się pięlegnować
 system.
\end_layout

\begin_layout Paragraph
Najprostrza rzecz która działa
\end_layout

\begin_layout Standard
Istotą tej reguły jest aby jak najszybciej pokazać efekt pracy klientowi.
 Jeśli coś jest proste uzyskanie efektu jest szybsze.
 Jest najbardziej zgodne z pierwszą, trzecią oraz siódmą zasadą manifestu
 agile.
 Pokazywanie klientowi często tego co zostało zrobione stymuluje potrzebne
 zmiany w systemie, które bez wizualnej reprezentacji zostały by pominięte,
 czy też zepchnięte a bardziej odległy termin.
\end_layout

\begin_layout Paragraph
Naprawdę tego nie potrzebujesz
\end_layout

\begin_layout Standard
Czasem zdarza się że tworzymy nowe klasy metody nie zastanawiając się czy
 aby napewno tego naprawdę potrzebujemy w tej chwili.
 Bądź też piszemy kod z myślą o przyszłych ewentualnych udogodnieniach które
 mogły by mieć miejsce jeśli trzeba będzie zrobić to lub owo.
 Jest w tym dużo gdybania.
 Reguła
\begin_inset CommandInset citation
LatexCommand cite
key "You.not.gonna.need.it"

\end_inset

 silnie nawołuje aby kodować tylko funkcjonalności rzeczywiste, te które
 są ważne - warto zadować sobie samemu pytanie 
\begin_inset Quotes sld
\end_inset

Czy aby napewno tego potrzebuje?
\begin_inset Quotes srd
\end_inset

, zamiast mechanicznie 'klepać' kod.
 Drugą sprawą na które zwraca ona uwagę to fakt że tracony jest fokus nad
 głównym celem, w momencie gdy zaczynamy gdybać o przyszłych udogodnieniach.
\end_layout

\begin_layout Paragraph
Iteracyjny proces wytwarzania
\end_layout

\begin_layout Standard
Aby czesto dostarczać działający system potrzeba jest podzielić proces tworzenia
 systemu na małe kawałki, z których każdy z nich dostarcza biznesową wartośc
 dla systemu.
 XP
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
skrót - Extreme Programing
\end_layout

\end_inset

 preferuje jako jednostkę przyjąć tydzień, dla scrum'a dwa.
 Lecz nie jest to sztywną regułą, warto dostoswać do możliwośc, jadnakże
 nacisk jest kładziony na krótkie okresy.
\end_layout

\begin_layout Paragraph
Scrum
\end_layout

\begin_layout Standard
W 1986 roku Hirotaka Takeuchi wraz Ikujiro Nonaka opisali całkowicie nową
 koncepcje zarządzania projektami informatycznymi.
 Położyli w nim nacisk na postęp całej drużyny współdziałającej razem nad
 wspolnymi celami.
 W 1991 roku DeGrace i Stahl jako pierwsi odniesli sie to tej metodologi
 pod nazwą Scrum.
\end_layout

\begin_layout Standard
Idea Scrum'a
\begin_inset CommandInset citation
LatexCommand cite
key "scrum.10.steps"

\end_inset

 wychodzi z założenia że na początku realizacji projektu mamy ogólny obraz
 jakie włąsciwości musi posiadać dany system.
 Zestawienei tych cech nazywane jest listą właściwości produktu
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
product backlog(ang.)
\end_layout

\end_inset

, lista ta powinna byc posortowana według biznesowej wartości.
 Powinna być też wydzielona częśc na włąsciwości krytyczne, oraz tak zwaną
 listę życzeń.
 Kolejnym etapem jest pogrupowanie - biorąc pod uwagę ich priorytety - celów
 i wydzielenie ram czasowych dla każdej z grup - okresy te nazywami sprintami.
 
\end_layout

\begin_layout Standard
Każdy sprint posiada własną listę włąsciwości, która jest juz bardziej szczegóło
wa, każdy element listy posiada swój priorytet dzięki czemu wiadomo jaka
 jest kolejnośc wykonywania zadań, może ona zawierać także włąsciwości opcjonaln
e choć nie jest to konieczne.
 Sprint trwa od dwóch tygodni do miesiąca.
 Zadania które estymowane są na wiecej niż 16 godzin powinny być podzielone.
 
\end_layout

\begin_layout Standard
Najpóźniej - jeśli to możliwe, można wcześniej - na koniec sprinta wszystkie
 właściwości z backloga muszą być gotowe do użycia.
 Dzięki temu możliwe jest zebrania reakcji od użytkowników.
 Ich uwagi są brane pod uwagę przy następnym sprincie, lub jeśli czas pozwala
 to w tym samym.
\end_layout

\begin_layout Standard
W ramach sprintu każdy dzień rozpoczyna się od krótkiego - około pietnastominuto
wego - spotkania w którym uczesniczą wszyscy członkowie zespołu.
 Każdy odpowiada na trzy pytania:
\end_layout

\begin_layout Itemize
Co udało mi się zrobić w dniu wczorajszym?
\end_layout

\begin_layout Itemize
Co planuje zrobić dziś?
\end_layout

\begin_layout Itemize
Na jakie przeszkody natrafiłem?
\end_layout

\begin_layout Standard
Dzięki temu cały zespół wie jakie zmiany następują w systemie, oraz daje
 to możliwość szybszego rozwiązania przeszkód dzięki spojżeniu na problem
 z wielu perspektyw.
\end_layout

\begin_layout Standard
Postęp w projekcie jest mierzony za pomocą 'tablic spalania'
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
burnout chart(ang.)
\end_layout

\end_inset

.
 Jest ona osobna dla całego projektu (poszczegolnych właściwości), oraz
 dla poszczególnych sprintów.
 Jako skali używa się czasem liczb pierwszych, lub liczb z ciągu Fibonnaciego.
\end_layout

\begin_layout Paragraph
Behavior Driven Development
\end_layout

\begin_layout Standard
BDD jest techniką organizacji produkcji oprogramowania która kładzie duży
 nacisk na współpracę pomiędzy programistami a ludźmi związanymi z biznesem
 - tymi którzy zamawiają system jak również z tymi którzy będą go używać,
 jest to zgodne z filozofią agile.
 Dana Northa
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://dannorth.net/ - oficjalny blog
\end_layout

\end_inset

 zaprezentował poraz pierwszy tą koncepcje w 2003 roku
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.Author.Introduction"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://www.flickr.com/photos/obie/421149993/
\end_layout

\end_inset

.
 Jak sama nazwa wskazuje zachowanie systemu jest najważniejszą kwestią w
 trakcie produkcji.
 Autor zwrócił szczęgólną uwagę na kwestię, wartości biznesowej którą wniesie
 implementacja konkretnego zachowanie w systemie - gdyż to jest najważniejsze
 z punktu widzenie użytkowników systemu.
 Ciekawe jest też jego podejście jak determinować którą rzecz powinniśmy
 implementować, sugeruje że powinniśmy sobie zadać pytanie 'Jaka jest kolejną
 najważniejsza cecha której system nie posiada?', wydaje sie banalne aczkolwiek
 daje najlepsze rezultaty dla investorow, a zwłaszcza końcowych użytkowników.
 W przypadku korzystania ze scrum'a jest to dobra reguła dla ustawiania
 priorytetów w backlog'u.
\end_layout

\begin_layout Standard
Zgodnie z tym Dan North przestawił
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.info"

\end_inset

 trzy główne założenia BDD którym przyjżymy się teraz każdej z osobna i
 dokładniej.
\end_layout

\begin_layout Subparagraph
Najważniejszy jest opis zachowania systemu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.AllAboutBehaviour"

\end_inset


\end_layout

\begin_layout Standard
Ta reguła zwraca uwagę że najważniejsze jest aby wiedzieć jak system ma
 sie zachować, jakie funkcjonalności ma udostępniać dla użytkownika.
 Zapis funkcjonalności w ten sposób - opis zachowanie - jest uwarunkowany
 potrzebą jednoznacznego rozumienia słów - efektu jaki mają mieć na system
 - tak aby programiści jak i ludzi związani z biznesem wzajemnie się rozumieli.
 Wykorzystuje się do tego celu historyjki użytkownika, które są narracją
 interakcji użytkownika z systemem, dokładniej zostaną omówione później.
\end_layout

\begin_layout Subparagraph
System udostepnia pewne zachowanie ponieważ wnosi ono wartość dla biznesu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.BusinessValue"

\end_inset


\end_layout

\begin_layout Standard
Jest dosyć częstym błedem gdy w systemie pojawiają się nowe funkcjonalści
 badź zostają użyte technologie, tylko dlatego że sprawiają wrażenie interesując
ych, jest to pewnego rodzaju patologia występująca w produkcji oprogramowania.
 Zwrócenie uwagi na wartość biznesową ma ogromny wpływ na efektywność oraz
 koszt związany z systemem, choć zazwyczaj nie jest to sprawa oczywista
 ani nie jest to postrzegane jako rzecz niezbędna, na co zwraca uwagę North.
\end_layout

\begin_layout Subparagraph
Opierać się na wiedzy, a nie przewidywaniach
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.EnoughIsEnough"

\end_inset


\end_layout

\begin_layout Standard
Domena metodologi BDUF zakłada że jesteśmy wstanie zapisać wszystkie informajce
 na temat systemu przed rozpoczęciem jego realizacji, innymi słowy jesteśmy
 wstanie przewidzieć wszystko na temat systemu - jednak bardzo często tak
 nie jest.
 Warto zwrócić uwagę na fakt im dłuższy okres chcemy przewidzieć oraz im
 bardziej złożony jest problem tym wiekszę prawdopodobieństwo że nasze założenia
 będą błądne.
 Taka postawa - posiadania wiedzy na początku - wynika również z obawy przed
 potencjalnym kosztem zmiany, menadżerowie są w tym najlepszym przykładem.
 BDUF się nie sprawdziło gdyż zmiany zawsze się pojawiają.
 BDD z założenie zabrania modelowania systemu przez zgadywania, a minimalizacja
 kosztu zmian jest uzyskiwana poprzez utrzymanie technicznie systemu w taki
 sposób aby łatwo można było w nim zmiany wprowadzać.
 W sekcji 'Filozofia Agile' zwrócona uwagę na metologie która to umożliwiają,
 takie jak iteracyjny proces produkcji, najprostsza rzecz która działa oraz
 nie implementowanie funkcjonalności które nie są wymagane.
\end_layout

\begin_layout Subparagraph
Opowieści użytkownika
\end_layout

\begin_layout Standard
North zwraca uwagę na trzy części które występują w opowieści
\end_layout

\begin_layout Itemize
tytuł, który jednoznacznie determinuje zakres serwowanych funkcjonalności
 w systemie
\end_layout

\begin_layout Itemize
krótki opis co jest celem danej funkcjonalności i dlaczego ją wprowadzamy
\end_layout

\begin_layout Itemize
warunki akceptacji, które definiuje kiedy funkcjonalność w systemie jest
 w pełni zaimplementowana, są one w formie scenariuszy
\end_layout

\begin_layout Standard
<#TODO przykład (potrzebny szablon)>
\end_layout

\begin_layout Subparagraph
Automatyczne testowanie zachowania systemu
\end_layout

\begin_layout Standard
Celem BDD jest wymuszenie współpracy z klientem oraz polepszenie z nim komunikac
ji poprzez stosowanie języka które obie strony rozumieją.
 Efektem takiej pracy jest specyfikacja w postaci historyjek użytkownika,
 które to umożliwiają pisanie automatycznych testów akceptacji, dzięki czemu
 jest możliwa lepsza weryfikacja poprawności zachowania systemu..
 Dużym błędem
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.BehaviourDrivenPrograming"

\end_inset

 które popełniano podczas TDD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Test-Driven-Development
\end_layout

\end_inset

 było zbyt dokładne testowanie kodu a nie zachowania systemu, które utrudniały
 zmiany, zamiast je stymulować
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Ludzie z kręgu BDD, nie zalecają pisania testów dla metod prywatnych, i
 chronionych
\end_layout

\end_inset

.
 Dlatego tak ważne jest aby pisać testy które weryfikują zachowanie systemu,
 badź poszczególnych komponentów.
 Tak też narodził się pomysł aby przygotować narzedzia wspierające ten proces.
 W 2003 roku Dan postanowił zastąpić JUnit własną biblioteką które ułatwiała
 by pisanie testów zachowania, nazwał ją JBahave.
 Na przełomie ostatnich pięciu lat powstało wiele odpowiednich, badź też
 rozszerzeń dla poszczególnych języków, poniżej lista.
\end_layout

\begin_layout Description
.NET NBehave
\begin_inset CommandInset citation
LatexCommand cite
key "NBehave"

\end_inset

, NSpec
\begin_inset CommandInset citation
LatexCommand cite
key "NSpec"

\end_inset

, NSpecify
\begin_inset CommandInset citation
LatexCommand cite
key "NSpecify"

\end_inset

, NUnit
\begin_inset CommandInset citation
LatexCommand cite
key "NUnit"

\end_inset

, Cucumber
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.wiki"

\end_inset


\end_layout

\begin_layout Description
Java Instinct
\begin_inset CommandInset citation
LatexCommand cite
key "instinct"

\end_inset

, JBehave
\begin_inset CommandInset citation
LatexCommand cite
key "JBehave"

\end_inset

, JDave
\begin_inset CommandInset citation
LatexCommand cite
key "JDave"

\end_inset

, Cucumber
\end_layout

\begin_layout Description
JavaScript JSSpec, JSpec
\begin_inset CommandInset citation
LatexCommand cite
key "Jspec"

\end_inset


\end_layout

\begin_layout Description
C CSpec
\begin_inset CommandInset citation
LatexCommand cite
key "CSpec"

\end_inset


\end_layout

\begin_layout Description
Scala Specs
\begin_inset CommandInset citation
LatexCommand cite
key "Specs"

\end_inset


\end_layout

\begin_layout Description
Ruby Rspec
\begin_inset CommandInset citation
LatexCommand cite
key "Rspec.homepage"

\end_inset

, Cucumber
\end_layout

\begin_layout Standard
W kolejnej sekcji zostanie omówiona biblioteka RSpec ze względu na użycie
 języka ruby w projekcie oraz biblioteka Cucumber która daje możliwośc uruchamia
nia historyjek użytkownika jako wykonywalny kod, przez co jest niezwykle
 użyteczna - narzędzie które jest opisane w sekcji piątej, wspiera export
 do tego formatu.
\end_layout

\begin_layout Subsection
Dlaczego Agile
\end_layout

\begin_layout Standard
Metodologie zwinne nie są wymysłem ostatnich lat
\begin_inset CommandInset citation
LatexCommand cite
key "WaterfallDoesntWork"

\end_inset

, a jednak popularność ich rozpoczeła zaczeła wzrastać w połowie lat dziewiędzie
siątch.
 Co więcej model kaskadowy jest ciągle w użyciu.
 Powodem takiej sytuacji jest zapewne zatwierdzenie modelu kaskadowego jako
 standardu dla projektów informatycznych przez DoD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Departament Obrony Narodowej Stanów Zjednoczonych
\end_layout

\end_inset

, następnie przyłączyło się do tego NATO.
 Royce - jako jeden z pierwszych dokonał analizy tej metodologi - który
 opisał dokładnie ten proces w latach siedemdziesiątych, w artykule 'Zarządzanie
 produkcją dużych systemów informatycznych', podał go jako przykład negatywny.
 Zwrócił uwagę na jego niską skuteczność oraz ogromne koszty.
\end_layout

\begin_layout Standard
Jeff Sutherland w artykule 'Czego mnie nauczył pierwszy Scrum'
\begin_inset CommandInset citation
LatexCommand cite
key "SCRUM.what.i.learned"

\end_inset

.
 Zapisał w nim cztery spostrzeżenia na temat metodologi kaskadowych względem
 Scrum'a.
\end_layout

\begin_layout Itemize
nie jest wstanie przewidzieć wszystkiego na początku
\end_layout

\begin_layout Itemize
nie jest wstanie dostarczyć projektu na czas
\end_layout

\begin_layout Itemize
jest mniej efektywna - mniejsza ilość funkcjonalności na jednostke czasu
 progrmisty
\end_layout

\begin_layout Itemize
wrażenie użytkownika jest tragiczne
\end_layout

\begin_layout Standard
Metodologie Agile zamiast walczyć z problem uzyskania całkowitej wiedzy
 na początku, stara się radzić z tą niewiedzą - bo jest to naturalne, że
 nie da sie napoczatku wszystkiego ustalić.
 To samo tyczy się zmian które wynikają w okresie produkcji, są one nawet
 traktowane jako coś porządanego.
 A skoro użytkownicy potrafią sprecyzować czego oczekują od systemu gdy
 zobaczą jego początkową wersje, warto ją pokazać jak najwcześniej, i często.
 Zwinne zarządzanie projektem stara się wkomponować w proces który daje
 klientowi duża kontrolę nad kształtem sytemu, i to na każdym etapie prac,
 a nie tylko na etapie wstępnej specjalizacji.
 Jest to ważnym element przyczyniającym się do zadowolenia z wyprodudukowanego
 oprogramowania - co potwierdza skutecznośc tej metody.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Technologie i wzorce projektowe
\end_layout

\begin_layout Standard
Choć metologia agile nie jest związana z konkretnymi technologiami, to jednak
 języki, oraz środowiska dające się łatwo refaktorować są korzystniejsze.
 Stosowanie się do opowiednich wzorców stymuluje pisanie dobrego kodu dzięki
 czemu zmiany w takim systemi są efektywniejsze, i łatwiej takim system
 sprzeżyć z innym.
 Jest to efetk filozofi jaką agile ma do zmian, musimy być na nie ciągle
 otwarci.
 Zmiany ze strony klienta są nieuniknione, a mowiac bardziej precyzyjnie
 są niezbędne aby produkt był wartościowy.
 Wpływ na to ma również użytkownik końcowego którego uwagi mogą podnięść
 znacznie używalnośc systemu, a informacje takie docierają późno.
 Czasem sami developerzy zauważają pewne nieprawidłowości i decydują się
 na zmiany.
 Wymaga to aby kod był dobrze utrzymany, bez redundantności, przejżysty
 i jednoznaczny.
 Poniżej zwrócę uwagę na sprawdzone wzorce które pomagają osiągnąć ten cel.
\end_layout

\begin_layout Subsection
Model-Widok-Kontroler
\end_layout

\begin_layout Standard
Wzorzec MVC
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Model-View-Controller
\end_layout

\end_inset

 ma już za sobą prawie 30 lat, został opracowany przez norwega Trygve Renskauga
 na Uniwersytecie w Oslo na przełomie lat 1978-79.
 Pierwotna nazwa brzmiała THING-MODEL-VIEW-EDITOR, końcową nazwę zawdzięczamy
 dyskusji autora z Adele Goldberg, dzięki której 10 grudnia 1979 przyjęto
 ostateczną nazwę.
 O samej przyczynie zainstnienia tego wzorca sam autor mówi 'MVC powstało
 jako naturalne rozwiazanie dla powszechnego problemu dostarczenia użytkonikom
 kontroli nad ich własnymi danymi z wielu perspektyw'
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

.
 Wskazuje to na idee odzielenia samych danych i sposobu ich prezentacji
 oraz modyfikacji, co jest logiczne.
 Zwróćmy uwagę dokładniej na poszczególne elementy oraz interakcje między
 nimi.
 
\end_layout

\begin_layout Paragraph
Model
\end_layout

\begin_layout Standard
Model jako abstrakcyjna forma reprezentacja encji jest ważnym aspektem izolacji.
 Cześć systemu kwalifikowana jako model można przedstawic jako zestaw atrybutów
 które przechowuje oraz logike biznesową która jednoznacznie okręśla zachowanie.
 Zgodnie z definicja wzorca model nie ma bezpośredniego dostępu do kontrolera
 czy widoku.
 Jeśli próby przechowywanie atrybutów poza modelem wydają sie dziwne i rzadko
 spotykane, to umieszczanie logiki w kontrolerach czy też widokach jest
 dosyc powszechną patologią która powoduje duże problemy w momencie prób
 optymalizacji czy też pięlegnacji kodu.
 Doświadczenie pokazuje że trzymanie się ściśle tych prostych dwóch reguł
 wymusza większy porządek w implementacji systemu.
 Łatwiej jest uniknąc redundancji kodu, oraz optymalizacja kodu jest mniej
 ryzkowna.
 Ma to duże znaczenie zwłaszcza w aplikacjach webowych gdzie mnogość form
 prezentacji danych wymaga jednoznacznie określonej logiki na poziomie modelu.
\end_layout

\begin_layout Paragraph
Widok
\end_layout

\begin_layout Standard
Widok jest odpowiedzialny za reprezentacje wizualna danych, oraz interfejsów
 edycyjnych.
 Pierwotana dofinicja
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

 zakładała że widok jest bezpośrednio powiązany z modelem.
 The Passive View Pattern zakłada że widok ma dostęp do modelu tylko za
 pomocą kontrolera - nie występuje bezpośrednie odwołanie do modelu.
 Widok który operuje tylko na danych przygotowanych przez kontroller jest
 dużo prostszy, a ponieważ wszelkie dane przechodzą przez kontroler jest
 programista ma nad nimi wiekszą kontrole - ta odmiana wzorca, jest promowana
 w aplikacjach webowych.
 Jedyna logika jaka może występować w widoku to ta związana z kontrolkami
 których zachowanie nie jest bezpośrednio związane z logiką biznesową.
\end_layout

\begin_layout Paragraph
Kontroler
\end_layout

\begin_layout Standard
Kontroler ma spełniać dwa proste zadania, przyjąc komunikat od użytkownika
 i przygotowac dane zwrotne.
 W kwesti pierwszej funkcjonalności rolą kontrolera jest aby przyjąc informacje
 od użytkownika, przekazac komunikat razem z danymi do odpowiedniego modelu
 przyjac wynik ktory model zwrocił, przygotowane dane przeslac do odpowiedniego
 widoku.
 Dodatkowo dochodzą kwestie jak uwierzytelnienie użytkownika, oraz kwestie
 własności do obiektów.
\end_layout

\begin_layout Standard
Pilnowanie aby nie wychodzic poza kompetencje owocuje duża niezależnosci
 poszczególnych kompomentów, oraz możliwość rozwoju aplikacji bez naruszania
 wcześniejszych elementów.
\end_layout

\begin_layout Subsection
Representational state transfer
\end_layout

\begin_layout Standard
REST jest stylen projektowania interfejsów w sytemach rozproszonych takich
 jak globalna sieć.
 Samo pojęcie zostało wprowadzone w 2000 roku przez Roy T.
 Fieldinga
\begin_inset CommandInset citation
LatexCommand cite
key "REST.roy.t.fielding.homepage"

\end_inset

, warto wspomnieć że jest on jednocześnie jednym z głównych autorów protokołu
 HTTP, oraz współtworcą Apacha
\begin_inset CommandInset citation
LatexCommand cite
key "ApacheFoundation"

\end_inset

.
\end_layout

\begin_layout Standard
Najważniejszą regułą jest projektowanie systemu ze zewnątrz (publicznych
 interfejsów) jako zasoby
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
resource, w języku angielskim
\end_layout

\end_inset

.
 Zasób jest to źródło informacji o danym charakterze i musi być określone
 przez rzeczownik nigdy przez czasownik.
 Przykładem zasobu może być profil użytkownika w danym serwisie, daje on
 najczęsciej możliwość pobierania informacji oraz manipulowania.
 Każdy zasób musi posiadać unikalny identyfikator, dla protokołu HTTP jest
 to URI
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Uniform Resource Identifier
\end_layout

\end_inset

.
 Bardzo często w aplikacjach webowych, jeden zasób potrafi prezentować te
 same dane w różnych formatach.
 W postaci HTML lub w formacie XML lub JSON dla różnego typu kontrolek javascrip
towych czy też RSS, ATOM dla czytników wiadomości.
\end_layout

\begin_layout Standard
Kolejną istotną sprawą jest kwestia minimalizacja metod w zasobie, czyli
 tak naprawde ilości komunikatów na które odpowiadają.
 Z założenie należy sie ograniczyć do maksymalnie siedmiu metod.
 Cztery z nich są związane z operacjami na pamięci stałej
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
często określane akronimem CRUD(Create,Read, Update, Delete)
\end_layout

\end_inset

, a są to metody:
\end_layout

\begin_layout Itemize
Utwórz
\end_layout

\begin_layout Itemize
Odczytaj
\end_layout

\begin_layout Itemize
Uaktualnij
\end_layout

\begin_layout Itemize
Usuń
\end_layout

\begin_layout Standard
Kolejne dwie metody związane są z ułatwieniem operacji edycyjnych:
\end_layout

\begin_layout Itemize
Nowy - wspiera tworzenie interfejsu tworzenia nowe instancji zasobu
\end_layout

\begin_layout Itemize
Edycja - przygotowuje interfejs z wczytanymi danymi istniejacej instacji
 zasobu
\end_layout

\begin_layout Standard
Siódma metoda służy do pobierania z zasobu kolekcji instancji, często określana
 słowem indeks lub lista.
\end_layout

\begin_layout Standard
Wyjście ponad siedem akcji jest dopuszczalne tylko w szczególnych przypadkach.
 Jeśli w systemie występuje średnio wiecej niż półtora akcji na zasób, sugeruje
 to możliwy bład związany ze sposobem zaprojektowania zasobów.
\end_layout

\begin_layout Standard
Wielką zaletą projektowania systemu zgodnie z tymi zasadami jest przejżysta
 możliwość interakcji między różnymi aplikacjami.
 Platforma taka jak Rails moją osobny moduł - ActiveResource - wspierający
 podpięcie zewnętrznych zasób jako wewnętrzne w systemie, ale i bez tego
 komunikacja z innymi systemami jest przejżysta.
 Ponad to przybliża to marzenie Sun'a o globalnej sieci jako jednym wielkim
 komputerze.
\end_layout

\begin_layout Subsection
Narzędzia wykorzystane w pracy
\end_layout

\begin_layout Standard
Poniżej zmieszczona jest krótki opis poszczęgólnych technologi użytych w
 części praktycznej, czyli języka Ruby, oraz środowiska rozwoju aplikacji
 Ruby on Rails.
 Następnie dokłanie zostanie zwrócona uwage na środowisko wspierające przygotowa
nie testów - RSpec i biblioteka to uruchamnia opowieści użytkownika w formacie
 tekstowym Cucumbers.
\end_layout

\begin_layout Subsubsection
Ruby
\end_layout

\begin_layout Standard
Jest język opracowany w połowie lat dziewiędziesiątych przez Yukihiro Matsumoto
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Yukihro Matsumoto jest często nazywany wśród ludzi związanych z rubym jako
 'matz'.
\end_layout

\end_inset

.
 Chiał aby powstał język w którym znalazłoby sie miejsce dla wybranych cech
 a takich języków jak Perl, Smalltalk, Eiffel, Ada i Lisp.
 Miał to być balans pomiedzy programowaniem funkcyjnymi a programowaniem
 imperatywnym.
 Pierwszy publiczne wydanie nastąpiło 1995 roku.
 Ogromny zwrost popularności w ostanich latach zawdzięcza środowisku rozwoju
 aplikacji Ruby on Rails, co znów zoowocowała w dużo społeczność która zaczeła
 używać język ruby w różnych innych zastosowaniach.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Jako przykład może posłużyć powłoka systemowa - które może być użyte jako
 zamięnnik dla basha - w której posługujemy sie językiem ruby, nazywa się
 rush(http://rush.heroku.com).
 Warto nadmienić że wiele skryptów dla systemów *nix, również jest już pisane
 w tym języku.
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Główne cechy języka
\end_layout

\begin_layout Itemize
wszystko jest obiektem (liczba, napis tekstowy)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Wyjątek stanowi tu referencja do obiektu
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
elastyczna składnia
\end_layout

\begin_layout Itemize
wsparcie dla bloków kodu
\end_layout

\begin_layout Itemize
mixiny, które w naturalny sposób rozwiązują problem wielodziedziczenia
\end_layout

\begin_layout Itemize
obsługa błędów przez wyjątki
\end_layout

\begin_layout Itemize
garbage collector
\end_layout

\begin_layout Subsubsection
Ruby on Rails
\end_layout

\begin_layout Standard
Jest to środowisko do szybkiego rozwoju aplikacji webowych opartych o bazy
 danych.
 Jest bardzo szybko rozwijające się środowiski, dzieki dużej społęczności
 zaangażowanej w projekt.
 Ruby on Rails
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.homepage"

\end_inset

 powstał poprzez wyciągniecie z projektu BaseCamp w 2004 roku przez Davida
 Heinemeiera Hanssona.
 Od tego czasu rozwija się bardzo prężnie, zwłaszcza na przełomie ostatniego
 roku.
\end_layout

\begin_layout Paragraph
Zalety środowiska
\end_layout

\begin_layout Itemize
narzucony wzorzec MVC
\end_layout

\begin_layout Itemize
bardzo dobre wsparcie dla REST'a
\end_layout

\begin_layout Itemize
abstrakcyjna mapper bazy danych ActiveRecord
\end_layout

\begin_layout Itemize
rozbudowany wsparcie dla testów (TestUnit, RSpec-on-rails, Cucumber)
\end_layout

\begin_layout Itemize
mnóstwo pluginów
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.plugins"

\end_inset

, wraz ze wsparcie do wydzielania częsci systemu
\end_layout

\begin_layout Subsubsection
RSpec
\end_layout

\begin_layout Standard
Jedno z założeń BDD wiąże się z automatyzacją testów w aplikacji.
 Aby osiągnąc to w efektywny sposób potrzebny jest dedykowany język
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Domain specific language (DSL)
\end_layout

\end_inset

 dla tego konkretnego zadania.
 Pierwsze myśli aby powstał dla języka ruby taki DSL, przedstawił Dave Astel
\begin_inset CommandInset citation
LatexCommand cite
key "DaveAstel.Blog"

\end_inset

 w artykule 'Nowe Spojrzenie na TDD'
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.RSPEC.FirstIntroduction"

\end_inset

z 2005 roku.
 Zwrócił on uwagę na zbudowanie takiego DSL'a który będzie wspierał opis
 zachowania wraz z weryfikacją tego zachowania.
 Zaproponował kilka zmian związanych z nazewnictwem, zamiast zaczynać nazwy
 metod od słowa 'test', zacząć od słowa 'should', używać słowa 'Context'
 zamiast 'TestCase' oraz 'shouldBe' w zamian 'assert'.
 Celem takich zabiegów było położenie nacisku na testowanie zachowania.
 Poniżej jest umieszczony przykład zaczęrpnięty z artykuły 'Wstęp do BDD'
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.BDD.DaveAstel.Intro"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/code/Rspec.Dave.Astel.First.Example.png
	clip

\end_inset


\end_layout

\begin_layout Standard
Przez okres ostatnich 3 lat framework przeszedł wiele modyfikacji i usprawnień.
 Dzięki pracy wielu osób
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.community,RSPEC.commit.history"

\end_inset

 formalny zapis testów jest jeszcze bardziej przejrzysty i intuicyjny.
 Gdyby uaktualnić przykład zamieszczony powyżej, biorąc pod uwagę aktualną
 specyfikacje frameworka, będzie on miał postać zbliżoną do zamieszczonej
 poniżej.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/code/Rspec.Dave.Astel.First.Example.update.png

\end_inset


\end_layout

\begin_layout Standard
Tak napisany spec
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Zamiast używać słowa test, Astel zaczoł nazywać taką weryfikajcę 'spec',
 prawdopodbnie od agnielskiego słowa specyfication
\end_layout

\end_inset

 ma duzo wiekszy wplyw na postrzeganie zachowania systemu ktory chcemy weryfikow
ać.
 Jest to również wielce pomocne przy generowanie raportów, które notabene
 są pewną formą dokumentacji systemu - opisują jego pożądane zachowanie.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/report/rspec.png

\end_inset


\end_layout

\begin_layout Standard
Aktualnie liderem projektu jest David Chelimsky
\begin_inset CommandInset citation
LatexCommand cite
key "DavidChelimsky.Blog"

\end_inset

, Astel ciągle jest aktywny w projekcie, zwłascza w promowaniu metodologi
 BDD.
 Sam Rspec nie doczekał się jeszcze żadnej książki, która zebrała by informacje
 na temat BDD, RSpec i Cucumber.
 W planach jest wydanie takiej książki
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.the.book"

\end_inset

 w kwietniu 2009 roku.
 Będzie to praca zbiorowa Chelimskiego, Astela, Norhta, Dennisa
\begin_inset CommandInset citation
LatexCommand cite
key "Zach.Denis.Blog"

\end_inset

, Hellesoya
\begin_inset CommandInset citation
LatexCommand cite
key "Aslak.Hellesoy.Blog"

\end_inset

, Helmkampa
\begin_inset CommandInset citation
LatexCommand cite
key "Bryan.Helmkapm.Blog"

\end_inset

.
 Zwracając uwagę na autorów będzie to spewnością pozycja z którą warto się
 zapoznać.
\end_layout

\begin_layout Subsubsection
Cucumber
\end_layout

\begin_layout Standard
Idealnym rozwiazaniem była by możliwość pisania testów integracyjnych -
 przez osoby które nie są programistami - która mogłyby powtarzalnie weryfikować
 system.
 Niestety nie jest to w pełni osiagalne, pewnym postępem w tym kierunku
 jest tworzenie tekstowy opowieści użytkownika, z wydziolonymi scenariuszami,
 które są zruzumiałe dla ludzi biznesu, jedna z najciekawszych implementacji
 jest Cucumber.
\end_layout

\begin_layout Standard
Jego historia zaczyna się od pierwszej próby - dla rspec'a - którą był RBehave
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.rbehave.introduction"

\end_inset

 napisany przez Northa w 2006 roku.
 Niestety nie był to jeszcze czymś akceptowalnym przez klienta biznesowego.
 Kolejnym krokiem był Story Runner
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.StoryRunnerInPlainText"

\end_inset

 nad którym pracowali Astel we wspópracy z Northem - pierwsze wersja były
 dostępne w drugie połowie 2007 roku.
 Projekt bazował na wcześniejszym RBehave, jednak jego największym sukcesem
 było możliwość uruchamiania opowieści użytkownika napisanych po angielsku
 z pliku tekstowego.
 Początkiem kwietnia 2008 roku Aslak Hellesoy rozpoczal prace nad nowym
 sródowiksiem do uruchamiania opowieści użytkownika z czystego pliku, projekt
 został ostatecznie nazwany Cucumber (pierwotnie nazywał się Stories).
 Po zaledwie pięciu miesiącach prac został on zamiennikiem dla Story Runner
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.replacement.of.story.runner"

\end_inset

, Chelimsky zmianę te uargumentował, że Cucumber posiada wiekszą ilośc funkcjona
lności, i jest prostszy w konfiguracji.
 Poniżej wymienione jego cechy.
\end_layout

\begin_layout Itemize
gramatyczny parser histori użytkownika w postaci tekstowej
\end_layout

\begin_layout Itemize
pozwala pisać opowieści użytkownika w ponad 20 językach (wtym także po polsku)
\end_layout

\begin_layout Itemize
lepsze śledzenie błędu (od story runnera)
\end_layout

\begin_layout Itemize
prosta konfigurcja (od story runnera)
\end_layout

\begin_layout Itemize
warunkowa kontynuacja kroku
\end_layout

\begin_layout Standard
Historyjki są pisane w języku dedykowanym kórego struktura umożliwia jednoznczne
 zrozumienie w świecie biznesu - język ten nazywa sie Gherkin
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.Gherkin"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Gherkin to po angielsku mały ogórek
\end_layout

\end_inset

.
 To własnie ten moduł odpowiada za wsparcie dla wielu języków
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.Gherkin.spokenlanguege"

\end_inset

, możliwe jest również dodawania nowych lub adaptacji dla własnych potrzeb
 już istniejących.
 Sam język posiada niewielką gamę słów kluczowych
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
w nawiasach podane angielskie opowiedniki
\end_layout

\end_inset

: 
\end_layout

\begin_layout Itemize
Właściwość (Feature) - określa jaką włąsciwość opisujemy
\end_layout

\begin_layout Itemize
Scenariusz (Scenario) - opisuje konkretny scenariusz działania użytkownika
\end_layout

\begin_layout Itemize
Dane (Given) - określa dane wejściowe (np: użytkownika znajduje sie w widoku
 systemu; użytkownik jest zalogowany)
\end_layout

\begin_layout Itemize
Jeżeli (When) - zwraca uwagę na czynności które podejmuje użytkownik
\end_layout

\begin_layout Itemize
Wtedy (Then) - określa pożadany efekt końcowy
\end_layout

\begin_layout Itemize
Oraz (And) - łączy kroki w sekcjach (Dane, Jeżeli, Wtedy)
\end_layout

\begin_layout Standard
Poniżej zamieszczony jest przykład.
\end_layout

\begin_layout Quote
\begin_inset Graphics
	filename images/stories/feature.example.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Wspomaganie procesu produkcji oprogramowania
\end_layout

\begin_layout Standard
Jak zostało wspomniane napoczątku, metodologie agile nie są związane z konkretną
 technologią czy też narzędziem, jednakże bardzo proste narzędzia potrafią
 usprawnić ten proces.
 Taki też cel jest postawiony przed tym narzędziem, ma wspomagać proces
 agregowania wymagań od klienta, ułatwiać pisania dokumentacji dla projektów,
 oraz analizy wykonanej pracy względem tej wyznaczonej.
 Od strony developerów ma ponadto ułatwiać pisanie automatycznych testów.
\end_layout

\begin_layout Standard
Potrzeba powstania takiego narzędzie była efektem współpracy z klientami
 którzy często zmieniali wymagania dotyczące projektów, czy też dokładali
 mnóstwo pracy w trakcie realizacji zadań.
 Było to powodem wielu problemów i komplikacji względem rozliczania pracy
 wykonej, gdyż nie było dobrego sposobu śledzenia zmian.
 
\end_layout

\begin_layout Standard
Kwestią drugą był problem związanym z brakiem automatycznych testów.
 Powodowało to często problemy które pojawiały się najczęściej tuż po przekazani
u kodu do produkcji.
 To uzmysłowiło jak ważne jest posiadania testów integracyjnych.
 
\end_layout

\begin_layout Standard
Środowisko Cucumber do uruchamiania historyjek tekstowych, na podstawie
 których weryfikowane jest zachowanie systemu jest w tym przypadku idealnym
 rozwiazaniem.
 Dodając do tego intuicyjny interfejs tworzenia takich opowieści, dzięki
 czemu klienci sami by mogli wprowadzać te informacje, to zaczyna to nabierąc
 coraz lepszej formy.
 Uzupełniem powyższych możliwości jest śledzeniem zmian.
 Gdy weźmiemy trzy na pozór proste właściwości, otrzymamy wartościowe narzędzie
 dla developerów.
\end_layout

\begin_layout Subsection
Specyfikacja funkcjonalna
\end_layout

\begin_layout Standard
Poniżej zostanie zwrócona uwaga na główne włąściwości projektu oraz cele
 które są ważne dla realizacji tego projetku
\end_layout

\begin_layout Subsubsection
Opowieści użytkownika
\end_layout

\begin_layout Standard
Jest to w zasadzie trzon całej aplikacji.
 O samej wartości opowieści użytkownika dużo powiedziano w sekcjach poświęconych
 BDD i Cucumber.
 Zalety opowieści w postaci czystego tekstu są ogromne, jednakoż czasem
 potrzeba jest monipulacji na tych danych, jak naprzykład eksportu do dokumentac
ji ładnie sformatowanych opowieści.
 Kolejną istotną kwestią jest wygoda wprowadzania tych historyjek.
 Developerzy lubią specyficzne
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Przykładem może być vi(m) czy też emacs.
\end_layout

\end_inset

 edytory tekstowe, jednakże pozostali ludzie preferują dostosowane interfejsy
 i właśnie dla nich to narzędzia będzie użyteczne.
\end_layout

\begin_layout Subsubsection
Śledzenie zmian
\end_layout

\begin_layout Standard
Wielokrotnie była zwrócona uwaga na sposób traktowania zmiany w metodologiach
 zwinnych - są one mile wiedziane na każdym etapie prac.
 Chociaż klienci bardzo chętnie te zmiany wprowadzają, to już trudniej im
 wszystkie modyfikacja spamiętać.
 Nie zawsze są świadomi jak bardzo ich pierwotna wizja różni się od wersji
 końcowej.
 Możliwość wykazania tych zmian w przejżysty sposób daje dwie korzyści.
 Po pierwsze klient może zaboczyć jak proces w którym bierze aktywny udział
 wpływa na poprawę jakości produktu.
 Drugą sprawą są kwestia finansowe, dzięki takiemu raportowi negocjatorzy
 otrzymają solidne argumenty.
\end_layout

\begin_layout Standard
Ważne jest tutaj śledzenie zmian ze względu na konkretną włąściwość systemu,
 oraz ze względu na wydzielony okres czasu.
\end_layout

\begin_layout Subsubsection
Eksport opowieści użytkownika
\end_layout

\begin_layout Standard
Przechowując dane o odpowiedniej strukturze, mamy możliwośc zautomatyzownia
 procesów 'odtwórczych', poprzez prezentacje danych w innych formatach.
\end_layout

\begin_layout Paragraph
Cucumber
\end_layout

\begin_layout Standard
Ten format jest sztandarowy dla tego projektu, dzięki eksportowaniu do tego
 formatu zautomatyzowany jest proces tworzenie plików dla poszczególnych
 właściwości.
 Dzieki temu zmiany w specyfikacji, można szybko aktualizować dla systemu
 automatycznych testów.
\end_layout

\begin_layout Paragraph
PDF
\end_layout

\begin_layout Standard
Potrzeba tworzenia dokumentacji technicznej systemu implementowanego jest
 ważne, gdy weźmieniemy pod uwagę fakt że opowieści użytkownika to świetna
 dokumentacja, to automatyczne utworzenie dokumentu pdf ze wszystkimi właściwośc
iami docenią wszyscy - nawet ci którzy lubią pisać dokumentacje.
\end_layout

\begin_layout Paragraph
WIKI
\end_layout

\begin_layout Standard
Dobrym narzędziem współpracy - czy to wewnątrz firmy, czy też pomiędzy -
 jest proste a zarazem elastyczne narzędzie jakim jest wiki.
 Dlatego eksport dla tego formatu spewnością będzie użyteczny.
\end_layout

\begin_layout Subsubsection
Import z formatu tekstowego <# jeśli termin pracy zostanie przesunięty>
\end_layout

\begin_layout Subsubsection
Używalność systemu <# jeśli termin pracy zostanie przesunięty>
\end_layout

\begin_layout Paragraph
łatwe wprowadzanie opowieści
\end_layout

\begin_layout Paragraph
szybka modyfikacja
\end_layout

\begin_layout Paragraph
reaporty związane ze zmianamis
\end_layout

\begin_layout Subsection
Implementacja narzędzia
\end_layout

\begin_layout Subsubsection
Diagram Modeli
\end_layout

\begin_layout Subsubsection
Diagram Kontrolerów
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Prezentacja aplikacji
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Podsumowanie
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AlanCooper.every.7.years"

\end_inset

 Alan Cooper - The Wisdom of Experience
\begin_inset Newline newline
\end_inset

http://www.cooper.com/journal/agile2008 - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto"

\end_inset

Agile Manifesto - official webpage
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Authors"

\end_inset

Agile Manifesto - Authors
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/authors.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Principles"

\end_inset

Principles behind the Agile Manifesto
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/principles.html- 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Tlumaczenie"

\end_inset

Tłumaczenie Agile Manifest
\begin_inset Newline newline
\end_inset

http://pl.wikipedia.org/wiki/Manifest_Agile - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ruby.homepage"

\end_inset

Oficjalna strona języka Ruby
\begin_inset Newline newline
\end_inset

http://www.ruby-lang.org/pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RoR.homepage"

\end_inset

Oficjalna strona frameworku Ruby on Rails
\begin_inset Newline newline
\end_inset

http://www.rubyonrails.pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rspec.homepage"

\end_inset

Oficjalna strona fremeworku Rspec
\begin_inset Newline newline
\end_inset

http://rspec.info - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Remarkable.wiki"

\end_inset

Wiki biblioteki Remarkable
\begin_inset Newline newline
\end_inset

http://wiki.github.com/carlosbrando/remarkable - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DRY.Interview.With.Dave.Thomas"

\end_inset

Bill Venners - Orthogonality and the DRY Principle
\begin_inset Newline newline
\end_inset

http://www.artima.com/intv/dry.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.Author.Report"

\end_inset

Trygve Reenskaug - The original MVC reports Trygve Reenskaug Dept.
 of Informatics University of Oslo
\begin_inset Newline newline
\end_inset

http://heim.ifi.uio.no/~trygver/2007/MVC_Originals.pdf - 13.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.pattern.describe"

\end_inset

Interactive Application Architecture Patterns 
\begin_inset Newline newline
\end_inset

http://ctrl-shift-b.blogspot.com/2007/08/interactive-application-architecture.html
 - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.Author.Introduction"

\end_inset

IDan North - ntroducing BDD
\begin_inset Newline newline
\end_inset

http://dannorth.net/introducing-bdd - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.info"

\end_inset

Dan North - Oficjlna strona o BDD
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.AllAboutBehaviour"

\end_inset

Dan North - BDD - It's All Behaviour
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ItsAllBehaviour - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.BusinessValue"

\end_inset

Dan North - BDD - Where's The Business Value
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/WheresTheBusinessValue - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.EnoughIsEnough"

\end_inset

Dan North - BDD - Enough Is Enough
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/EnoughIsEnough - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.Stories"

\end_inset

Dan North - BDD - Stories
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/Story - 18.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.BehaviourDrivenPrograming"

\end_inset

Dan North - BDD - Behaviour Driven Programming
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/BehaviourDrivenProgramming
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.GettingTheWordsRight"

\end_inset

Dan North - BDD - Getting The Words Right
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/GettingTheWordsRight - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.CostOfChange"

\end_inset

Dan North - BDD - Cost Of Change
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/CostOfChange - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DaveAstel.Blog"

\end_inset

Dave Astel - Blog
\begin_inset Newline newline
\end_inset

http://blog.daveastels.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DavidChelimsky.Blog"

\end_inset

David Chelimsky - Blog
\begin_inset Newline newline
\end_inset

http://blog.davidchelimsky.net - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.RSPEC.FirstIntroduction"

\end_inset

Dave Astel - A New Look at Test Driven Development
\begin_inset Newline newline
\end_inset

http://techblog.daveastels.com/2005/07/05/a-new-look-at-test-driven-development
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.BDD.DaveAstel.Intro"

\end_inset

Dave Astel - BDD Intro
\begin_inset Newline newline
\end_inset

http://techblog.daveastels.com/files/BDD_Intro.pdf - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.community"

\end_inset

Rspec Core Team - Contribute
\begin_inset Newline newline
\end_inset

http://rspec.info/community - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.commit.history"

\end_inset

github - Rspec Commits History
\begin_inset Newline newline
\end_inset

http://github.com/dchelimsky/rspec/commits/master - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.rbehave.introduction"

\end_inset

Dan North - Introducting rbehave
\begin_inset Newline newline
\end_inset

http://dannorth.net/2007/06/introducing-rbehave - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Zach.Denis.Blog"

\end_inset

Zach Denis - Blog
\begin_inset Newline newline
\end_inset

http://continuousthinking.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Aslak.Hellesoy.Blog"

\end_inset

Aslak Hellesoy - Blog
\begin_inset Newline newline
\end_inset

http://blog.aslakhellesoy.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Bryan.Helmkapm.Blog"

\end_inset

Bryan Helmkamp - Blog
\begin_inset Newline newline
\end_inset

 http://www.brynary.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.the.book"

\end_inset

The Pragmatic Programmer -The RSpec Book: Behaviour Driven Development with
 Ruby
\begin_inset Newline newline
\end_inset

http://www.pragprog.com/titles/achbd/the-rspec-book - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.StoryRunnerInPlainText"

\end_inset

David Chelimsky - Story Runner in Plain English
\begin_inset Newline newline
\end_inset

http://blog.davidchelimsky.net/articles/2007/10/21/story-runner-in-plain-english
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.Gherkin.spokenlanguege"

\end_inset

 Aslak Hellesoy - Cucumber spoken languages
\begin_inset Newline newline
\end_inset

http://github.com/aslakhellesoy/cucumber/blob/master/lib/cucumber/languages.yml
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.Gherkin"

\end_inset

Aslak Hellesoy - Cucumber: Gherkin
\begin_inset Newline newline
\end_inset

http://wiki.github.com/aslakhellesoy/cucumber/gherkin - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.wiki"

\end_inset

Oficjalna strona Cucumber
\begin_inset Newline newline
\end_inset

http://cukes.info/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.replacement.of.story.runner"

\end_inset

David Chelimsky - Cucumber
\begin_inset Newline newline
\end_inset

 http://blog.davidchelimsky.net/2008/9/22/cucumber - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ProgramingByBusinnessPeople"

\end_inset

Martin Fowler - Will DSLs allow business people to write software rules
 without involving programmers?
\begin_inset Newline newline
\end_inset

http://martinfowler.com/bliki/BusinessReadableDSL.html - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ruby.about.language"

\end_inset

Społeczność ruby - o Języku Ruby
\begin_inset Newline newline
\end_inset

http://www.ruby-lang.org/pl/about - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "REST.roy.t.fielding.homepage"

\end_inset

Roy T.
 Fielding - Strona domowa
\begin_inset Newline newline
\end_inset

http://roy.gbiv.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "REST.author.explenation"

\end_inset

Roy Thomas Fielding - Architectural Styles and the Design of Network-based
 Software Architectures - Roy Thomas Fielding
\begin_inset Newline newline
\end_inset

CHAPTER 5 Representational State Transfer (REST)
\begin_inset Newline newline
\end_inset

http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ApacheFoundation"

\end_inset

The Apache Software Foundation
\begin_inset Newline newline
\end_inset

http://www.apache.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Waterfall.introduction"

\end_inset

Royce W.W.
 - Managing the Development of Large Software Systems
\begin_inset Newline newline
\end_inset

http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SpiralModel.introduction"

\end_inset

Boehm B.
 - A Spiral Model of Software Development and Enhancement
\begin_inset Newline newline
\end_inset

http://www.cs.usu.edu/~supratik/CS%205370/r5061.pdf - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NBehave"

\end_inset

NBehave
\begin_inset Newline newline
\end_inset

http://code.google.com/p/nbehave/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NSpec"

\end_inset

NSpec
\begin_inset Newline newline
\end_inset

http://nspec.tigris.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NSpecify"

\end_inset

NSpecify
\begin_inset Newline newline
\end_inset

http://nspecify.sourceforge.net/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NUnit"

\end_inset

Nunit
\begin_inset Newline newline
\end_inset

http://www.nunit.org - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "instinct"

\end_inset

Instinct
\begin_inset Newline newline
\end_inset

http://code.google.com/p/instinct/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JBehave"

\end_inset

JBehave
\begin_inset Newline newline
\end_inset

http://jbehave.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JDave"

\end_inset

JDave
\begin_inset Newline newline
\end_inset

http://www.jdave.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Jspec"

\end_inset

JSpec
\begin_inset Newline newline
\end_inset

http://wiki.github.com/visionmedia/jspec - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "CSpec"

\end_inset

CSpec
\begin_inset Newline newline
\end_inset

http://wiki.github.com/arnaudbrejeon/cspec/home - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Specs"

\end_inset

Specs
\begin_inset Newline newline
\end_inset

http://code.google.com/p/specs/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "There.is.no.silver.bullet"

\end_inset

 Fred Brooks - No Silver Bullet - Essence and Accidents of Software Engineering
\begin_inset Newline newline
\end_inset

http://www.lips.utexas.edu/ee382c-15005/Readings/Readings1/05-Broo87.pdf - 24.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "WaterfallDoesntWork"

\end_inset

Tarmo Toikkanen - Don’t draw diagrams of wrong practices - or: Why people
 still believe in the Waterfall model
\begin_inset Newline newline
\end_inset

http://tarmo.fi/blog/2005/09/09/dont-draw-diagrams-of-wrong-practices-or-why-peop
le-still-believe-in-the-waterfall-model/ - 24.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "You.not.gonna.need.it"

\end_inset

Ronald E Jeffries - You’re NOT gonna need it!
\begin_inset Newline newline
\end_inset

http://www.xprogramming.com/Practices/PracNotNeed.html - 24.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "scrum.10.steps"

\end_inset

Agile Software - How To Implement Scrum In 10 Easy Steps
\begin_inset Newline newline
\end_inset

http://www.agile-software-development.com/2007/09/how-to-implement-scrum-in-10-eas
y-steps.html
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RoR.plugins"

\end_inset

Agile Web Development - Zbiór pluginów dla Railsów
\begin_inset Newline newline
\end_inset

http://agilewebdevelopment.com/plugins - 24.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SCRUM.what.i.learned"

\end_inset

Jeff Sutherland - What i have learned from first Scrum
\begin_inset Newline newline
\end_inset

http://jeffsutherland.com/scrum/FirstScrum2004.pdf
\end_layout

\end_body
\end_document
