#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language polish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
Bielska Wyższa Szkoła
\begin_inset Newline newline
\end_inset

im.
 Józefa Tyszkiewicza 
\begin_inset Newline newline
\end_inset

w Bielsku-Białej
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.3in
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/mczyz/bwsb.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Praca Dyplomowa
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Michał Czyż
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Temat Pracy: Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Opiekun
\begin_inset space ~
\end_inset

pracy: dr.
 M.
 Smołka
\end_layout

\begin_layout Description
\paragraph_spacing single
Ocena
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

albumu: 2288
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

ewidencyjny
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Bielsko-Biała, 2009
\end_layout

\begin_layout Standard

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\align right
Bielsko-Biała dn.
 15 lutego 2009
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Imię
\begin_inset space ~
\end_inset

i
\begin_inset space ~
\end_inset

nazwisko: Michał Czyż
\end_layout

\begin_layout Description
\paragraph_spacing single
Nr
\begin_inset space ~
\end_inset

albumu: 2288 
\end_layout

\begin_layout Description
\paragraph_spacing single
Wydział: Zarządzania i Informatyki 
\end_layout

\begin_layout Description
\paragraph_spacing single
Kierunek: Inżynieria Oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
OŚWIADCZENIE
\end_layout

\begin_layout Standard
Świadom odpowiedzialności prawnej oświadczam, że złożona praca inżynierska
 pt.: 
\series bold
Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\series default
 została napisana przeze mnie samodzielnie.
 
\end_layout

\begin_layout Standard
Równocześnie oświadczam, że praca ta nie narusza prawa autorskiego w rozumieniu
 ustawy z dnia 4 lutego 1994 roku o prawie autorskim i prawach pokrewnych
 (Dz.U.1994 nr 24 poz.
 83) oraz dóbr osobistych chronionych prawem cywilnym.
\end_layout

\begin_layout Standard
Ponadto praca nie zawiera informacji i danych uzyskanych w sposób nielegalny
 i nie była wcześniej przedmiotem innych procedur urzędowych związanych
 z uzyskaniem dyplomów lub tytułów zawodowych uczelni wyższej.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Section
Wstęp
\end_layout

\begin_layout Standard
Właściwe zarządzanie wymaganiami które ma spełniać oprogramowanie a którym
 źródłem jest osoba zamawiając ma strategiczne znaczenie aby produkt spełniał
 oczekiwania użytkownika końcowego.
 Biorąc pod uwagę doświadczenia innych, oraz własne można powiedzieć ze
 jest to zadanie nie łatwe niektóre źrodła donoszę że od 50 do 70 procent
 oprogramowania nie spełnia oczekiwań użytkowników.
\end_layout

\begin_layout Standard
Celem tej pracy jest przybliżenie metodologi zwinnych jako aktualnie najlepszego
 sposobu prowadzenie małych i średnich projektów.
 Wieże się z przygotowaniem prostego narzędzia które pozwoli formalizować
 zapotrzebowania i usprawni rozliczanie z klientem.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://martinfowler.com/bliki/BusinessReadableDSL.html
\begin_inset Newline newline
\end_inset

Ludzie biznesu nie umia programowac (cobol, jako przyklad)
\begin_inset Newline newline
\end_inset

cel pracy
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Przez okres ostatnich 40 lat promowane były najróżniejsze metody zarządzaniem
 projektem, według Alan Cooper średnio co 7 lat
\begin_inset CommandInset citation
LatexCommand cite
key "AlanCooper.every.7.years"

\end_inset

 zmienia się metodologia tworzenia oprogramowania.
 Począwszy na schematach blokowych a kończąc na zwinnym procesie tworzenia
 oprogramowania.
 Oczywiście nie ma srebrnej kuli, nie ma dotychczas rozwiązań które zapewniały
 by idealne rozwiązanie dla każdej sytuacji.
 Na co warto zwrócić uwagę w przypadku metodologi zwinnych to że różnią
 się znacznie od swych poprzedników, jest to pierwsza metodologia której
 zasady nie skupiają się na narzędziach i sztywnych regułach.
 Pomiędzy 11 a 14 Lutego 2001 przedstawiciele
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Authors"

\end_inset

 wielu idei jak extreme programming - Kent Beck, pragmatic programing -
 Dave Thomas, Andrew Hunt, SCRUM - Jeff Sutterland, crystal clear - Alistair
 Cockburn, adaptive software development - Jim Highsmith, oraz 11 innych
 doświadczonych programistów którzy podpisali się pod 'Agile Manifesto'
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto"

\end_inset

.
 Właśnie od jego nazwy wzięła się nazwa - metodologia zwinna (agile development).
 Manifest ten brzmi następująco.
\end_layout

\begin_layout Quote
Poprzez wytwarzanie oprogramowania oraz pomaganie innym w tym zakresie odkrywamy
 lepsze sposoby realizowania tej pracy.
 W wyniku tych doświadczeń zaczęliśmy przedkładać: 
\end_layout

\begin_layout Quote

\emph on
Jednostki i współdziałania między nimi 
\emph default
nad procesy i narzędzia.
 
\end_layout

\begin_layout Quote

\emph on
Działające oprogramowanie
\emph default
 nad dokładną dokumentację.
 
\end_layout

\begin_layout Quote

\emph on
Współpracę z klientem
\emph default
 nad negocjację umów.
 
\end_layout

\begin_layout Quote

\emph on
Reagowanie na zmiany
\emph default
 nad realizowanie planu.
\end_layout

\begin_layout Quote
Oznacza to, że wprawdzie doceniamy to co wymieniono po prawej stornie to
 jednak bardziej cenimy to co wymieniono po lewej.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Tlumaczenie"

\end_inset


\end_layout

\begin_layout Standard
Ja również podpisuje się pod tym dokumentem, w dalszym ciągu widze zastosowanie
 dla wcześniejszych metodologi, aczkolwiek skłonny jestem w większym stopniu
 skupiać się na współdziałaniu z klientem oraz reagowanie na zmiany (od
 strony klienta bądź zespołu), traktować decyzje jako tymczasowe.
 Przekładania zaimplementowanie malej funkcjonalności ponad bardzo szczegółową
 dokumentacje (BDUF
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Big Design Up Front - metodologia zakładająca stworzenie kompletnej dokumentacji
 przed rozpoczęciem prac implementacyjnych, zakłada ona że bez developerzy
  wstanie przewidziec rozwiązanie bez potrzeby budowania prototypów, bez
 napisania fragmentu kodu
\end_layout

\end_inset

).
 Zasady Agile Development
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset

 zwracają największą uwagę że najważniejsza jest użyteczność produkowanego
 oprogramowania, nawet jeśli wymusza to zmiany w późnym stadium produkcji.
 Kładą one nacisk na minimalizm, oraz na ciągłe usprawnianie procesu - częste
 retrospekcje połączone z wprowadzaniem zmian w sposobie tworzenia oprogramowani
a.
\end_layout

\begin_layout Standard
Największym problemem we wdrożeniu jest namówienie klienta na tą formę współprac
y, pamiętajmy że klient musi być integralną częścią zespołu, bierze czynny
 udział w procesie wytwarzania.
 Powodów takiej sytuacji jest wiele.
 Począwszy o prozaicznego, ludzie z założenia nie lubią zmian.
 Drugą sprawą jest kwestia rozliczenia kosztu systemu.
 Menadżerowie chcą wiedzieć ile projekt będzie kosztować, niestety w metodologi
 agile nie jest możliwe określenie ceny końcowego produktu.
 Argumentami które mogą przekonać jest podkreślenie jakości produktu, oraz
 efektu końcowego który można uzyskać przy określonym budżecie.
 A biorąc pod uwagę SCRUM, częste prezentacja efektów są równie ważne.
\end_layout

\begin_layout Standard
Jedną z ważniejszych kwestii jest możliwość wykazanie klientowi ile kwestii
 uległo zmianie w ciągu procesu, dzięki temu dużo łatwiej będzie wiedział
 jak lepszy stał się produkt (dana funkcjonalność) względem jego pierwotnych
 założeń i wyobrażeń, oraz dla nas developerów będzie możliwe uzasadnienie
 kosztu uzyskanie danej funkcjonalności.
 I oto tutaj pojawia się moja idea, bardzo prostego narzędzia które będzie
 wspierało ten proces.
\end_layout

\begin_layout Standard
Założeniem tej pracy jest przedstawienie procesu zbierania zapotrzebowań
 oraz zmian które pojawiają się w trakcie z użyciem prostych historyjek,
 wraz opisaniem narzędzia i technologi pomocniczych które znacznie usprawniają
 i zwiększają jakość tworzonego oprogramowania.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Streszczenie
\end_layout

\begin_layout Standard
W pierwszej części zwrócę większą uwagą na istniejące metodologie jakie
 metoda wodospadów oraz spiralny model.
 Sprobuje przedstawić idea tych modeli gdzie znajdowały one swe zastosowanie,
 i jaką zbierają krytykę, szczególnie z środowisk Agile.
 Następnie bardzo dokładnie przyjrzymy się podejściu agile, oraz związanych
 z nią bardziej szczegółowych metodologi.
 Poruszona będzie również że nie każda faza procesu tworzenia aplikacji
 może być agile, gdyż są fazy które nie mogą być agile, bądź nie wolno pozwolić
 aby takie były.
\end_layout

\begin_layout Standard
W Procesie wytwarzania oprogramowania w ten sposób - częste zmiany, wyrzucanie
 fragmentów kodu - krytyczne znaczenie mają technologie których się używa
 jak również koncepcje działania.
 Omówiony będzie w tym bardzo elastyczny obiektowy język funkcyjny jakim
 jest Ruby
\begin_inset CommandInset citation
LatexCommand cite
key "Ruby.homepage"

\end_inset

.
 Framework do budowania aplikacji webowych Ruby on Rails
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.homepage"

\end_inset

.
 Zostaną też dosyć dokładnie omówione frameworki wspomagające pisanie testów
 takie jak Rspec
\begin_inset CommandInset citation
LatexCommand cite
key "Rspec.homepage"

\end_inset

 i Cucumber
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.wiki"

\end_inset

, Remarkable
\begin_inset CommandInset citation
LatexCommand cite
key "Remarkable.wiki"

\end_inset

.
 Z tymi narzędziami wiążą się takie pojęcia jak MVC
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Model-view-controller
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report,MVC.smalltalk.beginning,MVC.pattern.describe"

\end_inset

, REST
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Representational State Transfer 
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "REST.author.explenation"

\end_inset

, DRY
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't Repeat Yourself
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DRY.Interview.With.Dave.Thomas"

\end_inset

, BDD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Behavior Driven Development
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "BDD.info"

\end_inset

 - które postaram się jak najlepiej przedstawić.
\end_layout

\begin_layout Standard
Kolejna część będzie próba uargumentowaniem perspektyw które uważam za niezbędne
 aby z tego narzędzia mogli efektywnie skorzystać osoby zamawiające oprogramowan
ie, nadzorujący prace a zwłaszcza projektanci interfejsów i developerzy.
 Następnie przedstawię techniczne rozwiązania zawarte w projekcie, zwrócę
 uwagę na sposób zaprojektowania bazy danych, wpływu na wydajność systemu.
 Ciekawym elementem będą również przykłady napisanych testów które postaram
 się przedstawić w sposób aby jeszcze lepiej można było zrozumieć zasadę
 BDD
\end_layout

\begin_layout Standard
Ostatnim etapem tej pracy jest prezentacja możliwości aplikacji, krok po
 kroku dla każdej z perspektyw.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Zarządzanie projektem
\end_layout

\begin_layout Standard
Na przełomnie ostatnich lat wiele method było forsowanych jako ten najlepsze
 przyjrzyjmy się dwom najbardziej popularnym, uznawanych za tradycyjne.
\end_layout

\begin_layout Subsection
Metody tradycyjne
\end_layout

\begin_layout Standard
Metody tradycyjne zwane też 'ciężkimi' zawdzięczają taki przydomek ilości
 dokumentacji która jest tworzona wiąże sie tym pojęcia Wielkie projektowanie
 na początku
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Z języka angielskiego BDUF
\end_layout

\end_inset

.
 Argumentacją takiego podejścia jest przeświadczenie że solidna dokumentacja
 niesie za sobą sukces projektu.
 Kolejną sprawą jest unikanie tak zwanego kosztu zmiany, gdyż bardzo dokładna
 dokumentacja pozwala ich uniknąc, oraz daje możliwość obliczyć koszt produktu
 na początku.
 Zwróćmy uwagę na dwie sztandarowe modele.
\end_layout

\begin_layout Subsubsection
Model Kaskadowy
\end_layout

\begin_layout Standard
Model Kaskadowy
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Waterfall model - z języka angielskiego
\end_layout

\end_inset

 został w prowadzony przez Winstona W.
 Royce w roku 1970 roku w artykule 'Zarządzanie produkcją dużych systemów
 informatycznych'
\begin_inset CommandInset citation
LatexCommand cite
key "Waterfall.introduction"

\end_inset

.
 Głównym założeniem tej metodologi jest podział produkcji oprogramowania
 na sześć niepodzielny faz:
\end_layout

\begin_layout Itemize
Specyfikacja wymagań funkcjonalnych
\end_layout

\begin_layout Itemize
Analiza systemu
\end_layout

\begin_layout Itemize
Modelowanie systemu, rozwiązań
\end_layout

\begin_layout Itemize
Implementacja
\end_layout

\begin_layout Itemize
Testy jednostkowe, oraz integracyjne
\end_layout

\begin_layout Itemize
Wdrożenie i pielęgnacja systemu
\end_layout

\begin_layout Standard
Przejście do kolejnej fazy jest możliwy tylko i wyłącznie po ukończenie
 aktualnej.
 Jeżeli na kolejnym etapie pojawią się problemy związane z poprzednim etapem
 należy się wrócić do poprzedniego etapu i wykonać go jeszcze, i tak do
 skutku.
 Proces kończy się w momencie gdy ostatni etap da zadowalający efekt.
\end_layout

\begin_layout Subsubsection
Model Spiralny
\end_layout

\begin_layout Standard
Model spiralny
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Spiral Model - z języka angielskiego
\end_layout

\end_inset

 zdefiniował Barry Boehm w artykule 'Model Spiralny w produkcji oprogramowania
 i usprawnienia'
\begin_inset CommandInset citation
LatexCommand cite
key "SpiralModel.introduction"

\end_inset

 z 1988 roku.
 Boehm podzieł proces produkcji oprogramowania na cztery iteracyjne fazy:
\end_layout

\begin_layout Itemize
Specyfikowanie systemu jak najbardziej precyzyjnie, ustalenie celów
\end_layout

\begin_layout Itemize
Analiza ryzyka oraz prototypowanie
\end_layout

\begin_layout Itemize
Implementacja, zawierająca 
\end_layout

\begin_deeper
\begin_layout Itemize
przygotowanie szczegółowych koncepcji
\end_layout

\begin_layout Itemize
programowanie
\end_layout

\begin_layout Itemize
intergrowanie z istniejąca częścią systemu
\end_layout

\begin_layout Itemize
testowanie
\end_layout

\begin_layout Itemize
odbiór
\end_layout

\end_deeper
\begin_layout Itemize
Analiza zakończonej iteracji i planowanie następnej
\end_layout

\begin_layout Standard
Specyfikacja modelu iteracyjnego nie narzuca jedynej takich etapów w fazie
 trzeciej, można tutaj użyć modelu kaskadowego.
 Każda iteracja jest swego rodzaju somdzielna, może rozpocząc się na juz
 prowadzonym projekcie, a po jej zakonczenie wszystkie zmiany które miały
 zostać osiągnięte są wdrożone w działający system.
\end_layout

\begin_layout Subsection
Filozofia Agile
\end_layout

\begin_layout Standard
Jak wykazano we wstepnie filozofia agile jest inna, jest pierwszą która
 kieruje uwagę na dostosowyanie się do konkretnego projektu klienta, i bycia
 elastycznym.
 Bardzo klarowny jest przekaz manifestu agile ( wartości które są najistoniejsze
, wymienione są jeszcze raz poniżej) oraz uzupełniając 12 zasad.
\end_layout

\begin_layout Standard
\align center

\series bold
Największe wartości Agile
\end_layout

\begin_layout Quote
\align center

\emph on
Jednostki i współdziałania między
\emph default
 
\end_layout

\begin_layout Quote
\align center

\emph on
Działające oprogramowanie
\end_layout

\begin_layout Quote
\align center

\emph on
Współpracę z klientem
\end_layout

\begin_layout Quote
\align center

\emph on
Reagowanie na zmiany
\end_layout

\begin_layout Standard
\align center

\series bold
Zasady Agile
\end_layout

\begin_layout Quote
\align center
Najwyższy priorytetem jest zadowolenie klienta 
\begin_inset Newline newline
\end_inset

poprzez wczesne i ciagłe dostarczanie wartościowego oprogramowania.
\end_layout

\begin_layout Quote
\align center
Zmiany w wymaganiach są mile wiedziane, nawet na późnym
\begin_inset Newline newline
\end_inset

 etapie prac.
 Proces agile rodzi sobie ze zmianą 
\begin_inset Newline newline
\end_inset

przez względ na korzyść dla klienta.
\end_layout

\begin_layout Quote
\align center
Dostarczać działający system często, 
\begin_inset Newline newline
\end_inset

czy to co kilka tygodni czy też miesięcy, 
\begin_inset Newline newline
\end_inset

z naciskiem na krótsze okresy.
\end_layout

\begin_layout Quote
\align center
Ludzie biznesu i developerzy muszą codziennie 
\begin_inset Newline newline
\end_inset

pracować razem przez cały okres projektu.
\end_layout

\begin_layout Quote
\align center
Prace na projektem należy połączyć z motywacją jednostek.
 
\begin_inset Newline newline
\end_inset

Zapewnij im środowisko pracy oraz wsparcie jakiego potrzebują.
 
\begin_inset Newline newline
\end_inset

Obdarz ich zaufaniem że wykonają pracę jak należy.
\end_layout

\begin_layout Quote
\align center
Najbardziej wydajną i efektowną metodą 
\begin_inset Newline newline
\end_inset

przekazu informacji dla zespołu developerów 
\begin_inset Newline newline
\end_inset

jest rozmowa twarzą w twarz.
\end_layout

\begin_layout Quote
\align center
Główną miarą postępu jest działające oprogramowanie.
\end_layout

\begin_layout Quote
\align center
Proces Agile promuje ciągły niczym nieprzerwany proces 
\begin_inset Newline newline
\end_inset

developemntu.
 Inwestorzy, developerzy oraz użytkownicy powinni 
\begin_inset Newline newline
\end_inset

zabiegać <constant pace indefinitely>.
\end_layout

\begin_layout Quote
\align center
Zwracanie ciągłej uwagi na techniczny kunszt 
\begin_inset Newline newline
\end_inset

oraz dobre projektowanie wspiera bycie zwinnym.
\end_layout

\begin_layout Quote
\align center
Prostota - czyli sztuka maksymalizacji ilości pracy 
\begin_inset Newline newline
\end_inset

która nie jest wykonana - jest wymagana.
\end_layout

\begin_layout Quote
\align center
Najlepsze architektury, wymagania oraz projekty 
\begin_inset Newline newline
\end_inset

pochodzą od zespołów które same sobą zarządzają.
\end_layout

\begin_layout Quote
\align center
W równych odstępach czasowych, zespół analizuje w jaki 
\begin_inset Newline newline
\end_inset

sposób stać się bardziej efektywny, następie zgodnie ze spostrzeżeniami
\begin_inset Newline newline
\end_inset

adaptuje zmiany we własnym zachowaniu zachowaniu.
\end_layout

\begin_layout Paragraph
roznice pomiędzy agile a metodologiami zwinnymi
\end_layout

\begin_layout Quote
czestszy deployment, silan kolaboracja z klientem
\end_layout

\begin_layout Paragraph
ui prototypes
\end_layout

\begin_layout Paragraph
Iteracyjny proces wytwarzania
\end_layout

\begin_layout Subparagraph
Najprostrza rzecz która działa
\end_layout

\begin_layout Paragraph
scrum nastepca extreme programming
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Technologie i wzorce projektowe
\end_layout

\begin_layout Standard
Przy motodologi agile bardza istone jest jakie narzędzia wybierzemy, oraz
 jakich wzorców musimy się bezwzglednie trzymać aby produkcja była efektywna.
 Wynika go z charakteru pracy, musimy być ciągle otwarci na zmieny zgłaszane
 przez klienta, oraz developerów.
 Zmiany ze strony klienta są nieuniknione, a mowiac bardziej precyzyjnie
 są niezbędne aby produkt był wartościowy.
 Zmiany które wychodzą od strony developerów czy to programistyczne, czy
 to związane z interfejsem użytkownika, są równie częste gdyż projekt na
 osi czasu ewoluje, znajdujemy lepsze, efektywniejsze rozwiązania.
 Wymaga to aby kod był dobrze utrzymany, bez redundantności, przejżysty
 i jednoznaczny.
 Poniżej zwrócę uwagę na sprawdzone wzorce które umożliwiają osiągnąć ten
 cel.
\end_layout

\begin_layout Subsection
Model-Widok-Kontroller
\end_layout

\begin_layout Standard
Wzorzec MVC ma już za sobą prawie 30 lat, został opracowany przez norwega
 Trygve Renskaug na Uniwersytecie w Oslo na przełomie lat 1978-79.
 Pierwotna nazwa brzmiała THING-MODEL-VIEW-EDITOR, końcową nazwę zawdzięczamy
 dyskusji autora z Adele Goldberg, dzięki której 10 grudnia 1979 przyjęto
 ostateczną nazwę.
 O samej przyczynie zainstnienia tego wzorca sam autor mówi 'MVC powstało
 jako naturalne rozwiazanie dla powszechnego problemu dostarczenia użytkonikom
 kontroli nad ich własnymi danymi z wielu perspektyw'
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

.
 Wskazuje to na idee odzielenia samych danych i sposobu ich prezentacji
 oraz modyfikacji, co jest w założeniu proste oraz logiczne.
 Zwróćmy uwagę dokładniej na poszczególne elementy oraz interakcje między
 nimi.
 
\end_layout

\begin_layout Paragraph
MODEL
\end_layout

\begin_layout Standard
Model jako abstrakcyjna forma reprezentacja encji jest ważnym aspektem izolacji.
 Cześć systemu kwalifikowana jako model można przedstawic jako zestaw atrybutów,
 informacje które przechowuje oraz logike biznesową która jednoznacznie
 okręśla zachowanie.
 Zgodnie z definicja wzorca model nie ma bezpośredniego dostępu do kontrolera
 czy widoku.
 Jeśli próby przechowywanie informacji poza modelem wydają sie dziwne i
 rzadko spotykane, to umieszczanie logiki w kontrolerach czy też widokach
 jest dosyc powszechną patologią która powoduje duże problemy w momencie
 prób optymalizacji czy też w okresie pięlegnacji kodu.
 Doświadczenie pokazuje że trzymanie się ściśle prostych dwóch reguł daje
 znaczne korzyści dla procesu produkcji oprogramowania.
 Łatwiej jest uniknąc redundancji kodu, oraz optymalizacja kodu jest możliwa
 efektywniej.
 Ma to duże znaczenie zwłaszcza w aplikacjach webowych gdzie mnogość form
 prezentacji danych wymaga jednoznacznie określonej logiki na poziomie modelu.
\end_layout

\begin_layout Paragraph
VIEW
\end_layout

\begin_layout Standard
Widok jest jednoznacznie odpowiedzialny za reprezentacje wizualna danych,
 oraz interfejsów edycyjnych.
 Pierwotana dofinicja
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

 zakładała że widok jest bezpośrednio powiązany z modelem.
 The Passive View Pattern zakłada że widok ma dostęp do modelu tylko za
 pomocą kontrolera - nie występuje bezpośrednie odwołanie do modelu.
 Celem jest aby widok prezentował dane, bez znajomości co znajduje sie w
 modelu - jego celem jest prezentacja danych które dostarcza mu kontroler.
 Jedyna logika jaka może tutaj występować to ta związana z kontrolkami których
 zachowanie nie jest bezpośrednio związane z logiką biznesową.
\end_layout

\begin_layout Paragraph
CONTROLLER
\end_layout

\begin_layout Standard
Kontroler ma spełniać dwa proste zadania, przyjąc komunikat od użytkownika
 i przygotowac dane zwrotne.
 W kwesti pierwszej funkcjonalności rolą kontrolera jest aby przyjąc informacje
 od użytkownika, przekazac komunikat razem z danymi do odpowiedniego modelu
 przyjac wynik ktory model zwrocił, przygotowane dane przeslac do odpowiedniego
 widoku.
 Dla aplikacji webowych dochodzą kwestie jak autentykacja, oraz kwestie
 własnościowe obiektów.
\end_layout

\begin_layout Standard
#TODO wykres zależności
\end_layout

\begin_layout Standard
Pilnowanie aby nie wychodzic poza kompetencje owocuje duża niezależnosci
 poszczególnych kompomentów, oraz duże możliwości rozwoju aplikacji bez
 naruszania wcześniejszych elementów
\end_layout

\begin_layout Standard
<#TODO, wiecej info, - Szczególnie zwróce uwagę na wariację MVP
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Model-View-Presenter
\end_layout

\end_inset

 - The Passive View Patern
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.pattern.describe"

\end_inset

, gdyż najlepiej wpisuje się on gdy patrzymy przez pryzmat aplikacji webowych>
\end_layout

\begin_layout Subsection
Don't Repeat Yourself
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Quote
Welcome changing requirements, even late in development.
 Agile processes harness change for the customer's competitive advantage.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Druga reguła Agile zacytowana powyżej stwierdza, że zmiany są mile widziane
 na każdym etapie pracy, nawet na tym bardzo zaawansowanym.
 Jedną z zasad która ułatwia taki cykl obróbki kodu - czasem wręcz tylko
 dzięki stosowaniu się do niej jest to możliwe - jest unikanie duplikacji
 kodu.
 Pomocna przy tym jest reguła DRY
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't Repeat Yourself, znana również jako Single Point of Truth
\end_layout

\end_inset

 zwraca ona uwagę na coś więcej niż tylko niepowtarzaniu kodu.
 Jak zwrócił Dave Thomas
\begin_inset CommandInset citation
LatexCommand cite
key "DRY.Interview.With.Dave.Thomas"

\end_inset

 to nie jest prawdziwa jej idea, sednem sprawy tej reguły jest aby każda
 cześc wiedzy systemu miała jedną autoratywną i jednoznaczną reprezentacje.
 Wiedza na temat systemu jak zwrócił w wywiadzie wychodzi ponad sam kod
 aplikacji, dotyczy ona schamatu baz danych, kwesti testów a nawet dokumentacji.
 Czasem aby móc osiągnać taki stan potrzebne są generatory kodu wiążace
 się z zawansowanymi technikami meteprogramowania lecz własnie dzieki stosowaniu
 się to tej reguły jesteśmy wstanie uzystkać elastyczny i dający się pięlegnować
 system.
\end_layout

\begin_layout Subsection
Behavior Driven Development
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Quote
Business people and developers must work together daily throughout the project.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
BDD to technika produkcji oprogramowania która kładzie duży nacisk na współpracę
 pomiędzy programistami a ludźmi związanymi z biznesem - tymi którzy zamawiają
 system jak również z tymi którzy będą go używać, jest to zgodne z regułą
 agile manifest zacytowanej powyżej.
 Dan North
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://dannorth.net/ - oficjalny blog
\end_layout

\end_inset

 zaprezentował poraz pierwszy tą koncepcje w 2003 roku
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.Author.Introduction"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://www.flickr.com/photos/obie/421149993/
\end_layout

\end_inset

.
 Jak sama nazwa wskazuje zachowanie systemu jest najważniejszą kwestią w
 trakcie produkcji.
 Autor zwrócił szczęgólną uwagę na kwestię, wartości biznesowej którą wniesie
 implementacja konkretnego zachowanie w systemie - gdyż to jest najważniejsze
 z punktu widzenie użytkowników systemu.
 Ciekawe jest też jego podejście jak determinować którą rzecz powinniśmy
 implementować, sugeruje że powinniśmy sobie zadać pytanie 'Jaka jest kolejną
 najważniejsza cecha której system nie posiada?', wydaje sie banalne aczkolwiek
 daje najlepsze rezultaty dla investorow, a zwłaszcza końcowych użytkowników.
\end_layout

\begin_layout Standard
Zgodnie z tym Dan North przestawił
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.info"

\end_inset

 trzy główne założenia BDD którym przyjżymy się teraz każdej z osobna i
 dokładniej.
\end_layout

\begin_layout Paragraph
Najważniejszy jest opis zachowania systemu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.AllAboutBehaviour"

\end_inset


\end_layout

\begin_layout Standard
Ta reguła zwraca uwagę że najważniejsze jest aby wiedzieć jak system ma
 sie zachować, jakie funkcjonalności ma udostępniać dla użytkownika.
 Zapis funkcjonalności w ten sposób - opis zachowanie - jest uwarunkowany
 potrzebą jednoznacznego rozumienia słów - efektu jaki mają mieć na system
 - tak aby programiści jak i ludzi związani z biznesem wzajemnie się rozumieli.
 Wykorzystuje się do tego celu historyjki użytkownika, które są narracją
 interakcji użytkownika z systemem, dokładniej zostaną omówione później.
\end_layout

\begin_layout Paragraph
System udostepnia pewne zachowanie ponieważ wnosi ono wartość dla biznesu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.BusinessValue"

\end_inset


\end_layout

\begin_layout Standard
Jest dosyć częstym błedem gdy w systemie pojawiają się nowe funkcjonalści
 badź zostają użyte technologie, tylko dlatego że sprawiają wrażenie interesując
ych, jest to pewnego rodzaju patologia występująca w produkcji oprogramowania.
 Zwrócenie uwagi na wartość biznesową ma ogromny wpływ na efektywność oraz
 koszt związany z systemem, choć zazwyczaj nie jest to sprawa oczywista
 ani nie jest to postrzegane jako rzecz niezbędna, na co zwraca uwagę Dan.
\end_layout

\begin_layout Paragraph
Opierać się na wiedzy, a nie przewidywaniach
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.EnoughIsEnough"

\end_inset


\end_layout

\begin_layout Standard
Domena metodologi BDUF zakłada że jesteśmy wstanie zapisać wszystkie informajce
 na temat systemu przed rozpoczęciem jego realizacji, innymi słowy jesteśmy
 wstanie przewidzieć wszystko na temat systemu - jednak bardzo często tak
 nie jest.
 Warto zwrócić uwagę na fakt im dłuższy okres chcemy przewidzieć oraz im
 bardziej złożony jest problem tym wiekszę prawdopodobieństwo że nasze założenia
 będą błądne.
 Taka postawa - posiadania wiedzy na początku - wynika również z obawy przed
 potencjalnym kosztem zmiany, menadżerowie są w tym najlepszym przykładem.
 BDUF się nie sprawdziło gdyż zmiany zawsze się pojawiają.
 BDD z założenie zabrania modelowania systemu przez zgadywania, a minimalizacja
 kosztu zmian jest uzyskiwana poprzez utrzymanie technicznie systemu w taki
 sposób aby łatwo można było w nim zmiany wprowadzać.
 W sekcji 'Filozofia Agile' zwrócona uwagę na metologie która to umożliwiają,
 takie jak iteracyjny proces produkcji, najprostsza rzecz która działa oraz
 nie implementowanie funkcjonalności które nie są wymagane.
\end_layout

\begin_layout Subsubsection
Historyjki użytkownika
\end_layout

\begin_layout Standard
Dan North zwraca uwagę na trzy części które występują w historyjce
\end_layout

\begin_layout Itemize
tytuł, który jednoznacznie determinuje zakres serwowanych funkcjonalności
 w systemie
\end_layout

\begin_layout Itemize
krótki opis co jest celem danej funkcjonalności i dlaczego ją wprowadzamy
\end_layout

\begin_layout Itemize
warunki akceptacji, które definiuje kiedy funkcjonalność w systemie jest
 w pełni zaimplementowana, są one w formie scenariuszy
\end_layout

\begin_layout Standard
<#TODO przykład>
\end_layout

\begin_layout Subsubsection
Automatyczne testowanie zachowania systemu
\end_layout

\begin_layout Standard
Celem BDD jest wymuszenie współpracy z klientem oraz polepszenie z nim komunikac
ji poprzez stosowanie języka które obie strony rozumieją.
 Efektem takiej pracy jest specyfikacja w postaci historyjek użytkownika,
 które to umożliwiają pisanie testów które dokładniej, i w krótszym czasie
 są w stanie zweryfikować czy poszczególne części systemu zachowują się
 tak jak powinny.
 Dużym błędem
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.BehaviourDrivenPrograming"

\end_inset

 które popełniano podczas TDD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Test-Driven-Development
\end_layout

\end_inset

 było zbyt dokładne testowanie kodu a nie zachowania systemu, które utrudniały
 zmiany, zamiast je stymulować.
 Dlatego tak ważne jest aby pisać testy które weryfikują zachowanie systemu,
 badź poszczególnych komponentów.
 Tak też narodził się pomysł aby przygotować narzedzia wspierające ten proces.
 Tak oto również w 2003 roku Dan postanowił zastąpić JUnit własną biblioteką
 które ułatwiała by pisanie testów zachowania, nazwał ją JBahave.
 Na przełomie ostatnich pięciu lat powstało wiele odpowiednich, badź też
 rozszerzeń dla poszczególnych języków takich jak:
\end_layout

\begin_layout Description
.NET NBehave
\begin_inset CommandInset citation
LatexCommand cite
key "NBehave"

\end_inset

, NSpec
\begin_inset CommandInset citation
LatexCommand cite
key "NSpec"

\end_inset

, NSpecify
\begin_inset CommandInset citation
LatexCommand cite
key "NSpecify"

\end_inset

, NUnit
\begin_inset CommandInset citation
LatexCommand cite
key "NUnit"

\end_inset

, Cucumber
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.wiki"

\end_inset


\end_layout

\begin_layout Description
Java Instinct
\begin_inset CommandInset citation
LatexCommand cite
key "instinct"

\end_inset

, JBehave
\begin_inset CommandInset citation
LatexCommand cite
key "JBehave"

\end_inset

, JDave
\begin_inset CommandInset citation
LatexCommand cite
key "JDave"

\end_inset

, Cucumber
\end_layout

\begin_layout Description
JavaScript JSSpec, JSpec
\begin_inset CommandInset citation
LatexCommand cite
key "Jspec"

\end_inset


\end_layout

\begin_layout Description
C CSpec
\begin_inset CommandInset citation
LatexCommand cite
key "CSpec"

\end_inset


\end_layout

\begin_layout Description
Scala Specs
\begin_inset CommandInset citation
LatexCommand cite
key "Specs"

\end_inset


\end_layout

\begin_layout Description
Ruby Rspec
\begin_inset CommandInset citation
LatexCommand cite
key "Rspec.homepage"

\end_inset

, Cucumber
\end_layout

\begin_layout Standard
W dalszej części pracy skupina będzie uwaga bibliotece RSpec ze względu
 na użycie języka ruby w projekcie oraz biblioteki Cucumber która daje możliwośc
 uruchamiania historyjek użytkownika jako wykonywalny kod, przez co jest
 niezwykle użyteczna.
 Zostaną one omówione w kolejnych dwóch sekcjach.
\end_layout

\begin_layout Subsection
RSPEC
\end_layout

\begin_layout Standard
Jedno z założeń BDD wiąże się z automatyzacją testów w aplikacji.
 Aby osiągnąc to w efektywny sposób potrzebny jest dedykowany język
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Domain-specific language
\end_layout

\end_inset

 dla tego konkretnego zastosowania.
 Pierwsze myśli aby taki powstał przedstawił Dave Astel
\begin_inset CommandInset citation
LatexCommand cite
key "DaveAstel.Blog"

\end_inset

 w artykule 'Nowe Spojrzenie na TDD'
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.RSPEC.FirstIntroduction"

\end_inset

z 2005 roku.
 Zwrócił on uwagę na zbudowanie takiego DSL'a który będzie wspierał opis
 zachowania pożądanego wraz z ułatwieniami w weryfikacji tego zachowania.
 Zaproponował kilka zmian związanych z nazewnictwem, zamiast zaczynać nazwy
 metod od słowa 'test', zacząć od słowa 'should', używać słowa 'Context'
 zamiast 'TestCase' oraz 'shouldBe' w zamian 'assert'.
 Celem takich zabiegów było położenie nacisku na testowanie zachowania.
 Poniżej jest umieszczony przykład zaczęrpnięty z artykuły 'Wstęp do BDD'
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.BDD.DaveAstel.Intro"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/code/Rspec.Dave.Astel.First.Example.png
	clip

\end_inset


\end_layout

\begin_layout Standard
Przez okres ostatnich 3 lat framework przeszedł wiele modyfikacji i usprawnień.
 Dzięki pracy wielu osób
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.community,RSPEC.commit.history"

\end_inset

 formalny zapis testów jest jeszcze bardziej przejrzysty i intuicyjny.
 Gdyby uaktualnić test powyżej do aktualnie specyfikacji frameworka, będzie
 on miał postać zbliżoną do zamieszczonej poniżej.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/code/Rspec.Dave.Astel.First.Example.update.png

\end_inset


\end_layout

\begin_layout Standard
Tak napisany spec ma duzo wiekszy wplyw na postrzeganie zachowania systemu
 ktory testujemy.
 Jest to również wielce pomocne przy generowanie raportów, które notabene
 są pewną formą dokumentacji systemu.
\end_layout

\begin_layout Standard
<# raport >
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://pastie.org/368648
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aktualnie czołowym developerem projektu jest David Chelimsky
\begin_inset CommandInset citation
LatexCommand cite
key "DavidChelimsky.Blog"

\end_inset

, Astel ciągle jest aktywny w projekcie, zwłascza w promowaniu metodologi
 BDD.
 Sam Rspec nie doczekał się jeszcze żadnej książki, która zebrała by informacje
 na temat BDD, RSPEC i Cucumber.
 W planach jest wydanie takiej książki
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.the.book"

\end_inset

 w kwietniu 2009 roku.
 Będzie to praca zbiorowa Chelimskiego, Astela, Norhta, Dennisa
\begin_inset CommandInset citation
LatexCommand cite
key "Zach.Denis.Blog"

\end_inset

, Hellesoya
\begin_inset CommandInset citation
LatexCommand cite
key "Aslak.Hellesoy.Blog"

\end_inset

, Helmkampa
\begin_inset CommandInset citation
LatexCommand cite
key "Bryan.Helmkapm.Blog"

\end_inset

.
 Zwracając uwagę na autorów będzie to spewnością pozycja warta zapoznania
\end_layout

\begin_layout Subsection
Cucumber
\end_layout

\begin_layout Standard
Członkami zespołu są również ludzie biznesu którzy nie programują, po doświadzcz
eniach
\begin_inset CommandInset citation
LatexCommand cite
key "ProgramingByBusinnessPeople"

\end_inset

 z językiem COBOL jest to wręcz wskazane aby tak zostało.
 Celem ich obecności jest utworzenie specyfikacji systemu zrozumiałej dla
 obu stron, oraz dającej się łatwo przetworzyć na automatyczne testy.
 
\end_layout

\begin_layout Standard
Pierwszą próbą zbudowania takiego dsl był RBehave
\begin_inset CommandInset citation
LatexCommand cite
key "RSPEC.rbehave.introduction"

\end_inset

 napisany przez Northa w 2006 roku.
 Niestety nie był to jeszcze czymś akceptowalnym przez klienta biznesowego.
 Kolejnym krokiem był Story Runner
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.StoryRunnerInPlainText"

\end_inset

 nad którym pracowali Astel we wspópracy z Northem - pierwsze wersja były
 dostępne w drugie połowie 2007 roku.
 Projekt bazował na wcześniejszym RBehave, jednak jego największym sukcesem
 było możliwość uruchamiania opowieści użytkownika napisanych po angielsku.
 Początkiem kwietnia 2008 roku Aslak Hellesoy rozpoczal prace nad nowym
 sródowiksiem do uruchamiania opowieści użytkownika z czystego pliku jako
 automatycznych testów integracyjnych, projekt został ostatecznie nazwany
 Cucumber (pierwotnie nazywał się Stories).
 Po zaledwie pięciu miesiącach prac został on zamiennikiem dla Story Runner
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.replacement.of.story.runner"

\end_inset

, Chelimsky zmianę te uargumentował, że projekt posiada wiekszą ilośc funkcjonal
ności, i jest prostszy w konfiguracji.
 Zwróćmy uwagę na te funkcjonalności.
\end_layout

\begin_layout Itemize
gramatyczny parser histori użytkownika w postaci tekstowej
\end_layout

\begin_layout Itemize
pozwala pisać opowieści użytkownika w ponad 20 językach (wtym także po polsku)
\end_layout

\begin_layout Itemize
lepsze śledzenie błędu
\end_layout

\begin_layout Itemize
prosta konfigurcja
\end_layout

\begin_layout Itemize
warunkowa kontynuacja kroku
\end_layout

\begin_layout Standard
Historyjki są pisane w języku dedykowanym kórego struktura umożliwia jednoznczne
 zrozumienie w świecie biznesu - język ten nazywa sie Gherkin
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.Gherkin"

\end_inset


\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Gherkin to po angielsku mały ogórek
\end_layout

\end_inset

.
 To własnie ten moduł odpowiada za wsparcie dla wielu języków
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.Gherkin.spokenlanguege"

\end_inset

, wraz z dosyć łatwą możliwością dodawania nowych lub adaptacji dla własnych
 potrzeb.
 Sam język posiada niewielką gamę słów kluczowych
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
w nawiasach podane angielskie opowiedniki
\end_layout

\end_inset

: 
\end_layout

\begin_layout Itemize
Właściwość (Feature) - określa jaką włąsciwość opisujemy
\end_layout

\begin_layout Itemize
Scenariusz (Scenario) - opisuje konkretny scenariusz działania użytkownika
\end_layout

\begin_layout Itemize
Dane (Given) - określa dane wejściowe (np: użytkownika znajduje sie w widoku
 systemu; użytkownik jest zalogowany)
\end_layout

\begin_layout Itemize
Jeżeli (When) - zwraca uwagę na czynności które podejmuje użytkownik
\end_layout

\begin_layout Itemize
Wtedy (Then) - określa pożadany efekt końcowy
\end_layout

\begin_layout Itemize
Oraz (And) - łączy kroki w sekcjach (Dane, Jeżeli, Wtedy)
\end_layout

\begin_layout Quote

\series bold
Właściwość
\series default
 
\bar under
Zarządzanie funkcjonalnościami
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\bar under
ustalić jednolity format
\end_layout

\end_inset


\end_layout

\begin_layout Quote
W celu umożliwienia wprowadzania opisów funkcjonaności 
\end_layout

\begin_layout Quote
Jako klient lub programista
\end_layout

\begin_layout Quote
Chcę mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\end_layout

\begin_deeper
\begin_layout Quote

\series bold
Scenariusz
\series default
 
\bar under
Dodanie nowego opisu funcjonalności
\end_layout

\begin_deeper
\begin_layout Quote

\series bold
Dane
\series default
 jestem na stronie tworzenia opisu funkcjonalności
\end_layout

\begin_layout Quote

\series bold
Jeżeli
\series default
 wpisze 
\begin_inset Quotes sld
\end_inset

Zarządzanie Scenariuszami
\begin_inset Quotes srd
\end_inset

 w pole 'tytuł' 
\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 
\begin_inset Quotes sld
\end_inset

umożliwić zarządzanie opisami funkcjonalności
\begin_inset Quotes srd
\end_inset

 w pole 'cel'
\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 
\begin_inset Quotes sld
\end_inset

klient lub programista
\begin_inset Quotes srd
\end_inset

 w pole 'jako'
\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 
\begin_inset Quotes sld
\end_inset

mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\begin_inset Quotes srd
\end_inset

 w polę 'chcę'
\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 nacisnę przycisk utwórz
\end_layout

\begin_layout Quote

\series bold
Wtedy
\series default
 powinien zostać przeniesiony na stronę funcjonalności
\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 powinien widzieć 
\begin_inset Quotes sld
\end_inset

Zarządzanie Scenariuszami
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 powinien widzieć 
\begin_inset Quotes sld
\end_inset

umożliwić zarządzanie opisami funkcjonalności
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 powinien widzieć 
\begin_inset Quotes sld
\end_inset

klient lub programista
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 powinien widzieć 
\begin_inset Quotes sld
\end_inset

mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset


\series bold
oraz
\series default
 powinienem widzieć przycisk dodaj scenariusz
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Representational state transfer
\end_layout

\begin_layout Standard
REST jest stylen projektowania interfejsów w sytemach rozproszonych takich
 jak globalna sieć.
 Samo pojęcie zostało wprowadzone w 2000 roku przez Roy T.
 Fieldinga
\begin_inset CommandInset citation
LatexCommand cite
key "REST.roy.t.fielding.homepage"

\end_inset

, warto wspomnieć że jest on jednocześnie jednym z głównych autorów protokołu
 HTTP, oraz współtworcą Apacha
\begin_inset CommandInset citation
LatexCommand cite
key "ApacheFoundation"

\end_inset

.
\end_layout

\begin_layout Standard
Najważniejszą regułą jest projektowanie systemu ze zewnątrz (elementów odbierają
cych komunikaty) jako zasoby
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
resource, w języku angielskim
\end_layout

\end_inset

.
 Zasób jest to źródło informacji o danym charakterze i musi być reprezentowany
 przez rzeczownik nigdy przez czasownik.
 Przykładem zasobu może być profil użytkownika w danym serwisie, daje on
 najczęsciej możłiwość podglądniecia informacji oraz ich zaktualizowanie.
 Każdy zasób musi posiadać unikalny identyfikator, dla protokołu HTTP jest
 to URI
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Uniform Resource Identifier
\end_layout

\end_inset

.
 Bardzo często w aplikacjach webowych, jeden zasób potrafi prezentować te
 same dane w różnych formatach.
 W postaci HTML lub w formacie XML lub JSON dla różnego typu kontrolek javascrip
towych czy też RSS, ATOM dla czytników wiadomości.
\end_layout

\begin_layout Standard
Kolejną istotną sprawą jest kwestia minimalizacja metod w zasobie, czyli
 tak naprawde ilości komunikatów na które odpowiadają.
 Z założenie należy sie ograniczyć do maksymalnie siedmiu metod.
 Cztery z nich są związane z operacjami na pamięci stałej
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
często określane akronimem CRUD(Create,Read, Update, Delete)
\end_layout

\end_inset

, a są to metody:
\end_layout

\begin_layout Itemize
Utwórz
\end_layout

\begin_layout Itemize
Odczytaj
\end_layout

\begin_layout Itemize
Uaktualnij
\end_layout

\begin_layout Itemize
Usuń
\end_layout

\begin_layout Standard
Kolejne dwie metody związane są z ułatwieniem operacji edycyjnych:
\end_layout

\begin_layout Itemize
Nowy - wspiera tworzenie interfejsu tworzenia nowe instancji zasobu
\end_layout

\begin_layout Itemize
Edycja - przygotowuje interfejs z wczytanymi danymi istniejacej instacji
 zasobu
\end_layout

\begin_layout Standard
Siódma metoda służy do odpytywania zasobu o kolekcje instancji, często określana
 słowem indeks lub lista.
\end_layout

\begin_layout Standard
Wychodznie ponad siedem akcji jest dopuszczalne tylko w szczególnych przypadkach.
 Jeśli w systemie występuje średnio wiecej niż półtora akcji na zasób, sugeruje
 to możliwy bład związany ze sposobem zaprojektowania zasobów
\end_layout

\begin_layout Standard
Wielką zaletą projektowania systemu zgodnie z tymi zasadami jest przejżysta
 możliwość interakcji między różnymi systemami.
 Platforma taka jak Rails moją osobny moduł - ActiveResource - wspierający
 podpięcie zewnętrznych zasób jako wewnętrzne w systemie, ale i bez tego
 komunikacja z innymi systemami jest przejżysta.
 Ponad to przybliża to marzenie Sun'a o globalnej sieci jako jednym wielkim
 komputerze.
\end_layout

\begin_layout Subsection
Ruby on Rails
\end_layout

\begin_layout Standard
Aby specyfikowanie, miało sens musi być ono zwiączone zaimplementowanym
 system.
 Powyższe wzorce bardzo dobrze są wspierane w środkowisku Ruby on Rails.
 Jest to w pełni wyposażone środowisko do tworznia aplikacji internetowych
 opartych o bazy danych zgodne ze wzorcem MVC
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.homepage"

\end_inset

.
 
\end_layout

\begin_layout Standard
Ruby on Rails powstał poprzez wyciągniecie z projektu BaseCamp w 2004 roku
 przez Davida Heinemeiera Hanssona.
 Od tego czasu rozwija się bardzo prężnie, zwłaszcza na przełomie ostatniego
 roku.
\end_layout

\begin_layout Standard
Od wersji 2.0 (Grudzień 2007) wspiera bardza dobrze REST.
 Narzędzia takie jak rspec on rails, remarkable, cucumber ułatwiają prowadzeni
 procesu w ramach metodologi BDD.
\end_layout

\begin_layout Subsubsection
Ruby
\end_layout

\begin_layout Standard
Sam język ruby
\begin_inset CommandInset citation
LatexCommand cite
key "Ruby.about.language"

\end_inset

 ma duże wpływ na wszystkie narzędzia które omówiono powyżej.
 Jak również na kod który sami musimy napisać.
 Dzięki nazwykłej elastyczności, i zaawansowanym możliwością metaprogramowania
 było mozliwe powstanie takich narzędzi jak Rails, Rspec czy też Cucumber.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Wspomaganie procesu produkcji oprogramowania
\end_layout

\begin_layout Standard
System ma dostarczać cztery główne moduły funkcjonalności, które są wymagane
 aby wspierać proces specyfikowania systemu.
\end_layout

\begin_layout Standard
<#TODO napisać coś więcej, dlaczego taki pomysł, itp>
\end_layout

\begin_layout Subsection
Zarządzanie specyfikacją projektu 
\end_layout

\begin_layout Standard
zadaniem to opiera się na udostepnieniu użytkownikom wprowadzania specyfikacji
 w intuicyjny dla nich sposób, jednocześnie wymuszajać formalną strukturę
 dzięki czemu fukncjonalności bedą opisane zgodnie z zasadą historyjek użytkowni
ka (BDD).
 Dzięki temu będą one posiadały odpowiednią strukturę dając możliwośc prezentacj
i informacji w róznej postaci.
\end_layout

\begin_layout Standard
Związane jest z dwoma funkcjonalnościami systemu, które postaram się poniżej
 zaprezentować w formie historyjek, gdyż taka forma daje najlepsze możliwości.
\end_layout

\begin_layout Subsubsection
Zarządzanie funkcjonalnościami
\end_layout

\begin_layout Description
Tytuł 
\bar under
Zarządzanie funkcjonalnościami
\end_layout

\begin_layout Description
Cel W celu umożliwienia wprowadzania opisów funkcjonaności 
\end_layout

\begin_layout Description
Jako klient lub programista
\end_layout

\begin_layout Description
Chcę mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Dodanie nowego opisu funcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie tworzenia opisu funkcjonalności
\end_layout

\begin_layout Description
Kiedy wpisze 
\begin_inset Quotes sld
\end_inset

Zarządzanie Scenariuszami
\begin_inset Quotes srd
\end_inset

 w pole 'tytuł' 
\begin_inset Newline newline
\end_inset

i 
\begin_inset Quotes sld
\end_inset

umożliwić zarządzanie opisami funkcjonalności
\begin_inset Quotes srd
\end_inset

 w pole 'cel'
\begin_inset Newline newline
\end_inset

i 
\begin_inset Quotes sld
\end_inset

klient lub programista
\begin_inset Quotes srd
\end_inset

 w pole 'jako'
\begin_inset Newline newline
\end_inset

i 
\begin_inset Quotes sld
\end_inset

mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\begin_inset Quotes srd
\end_inset

 w polę 'chcę'
\begin_inset Newline newline
\end_inset

i nacisnę przycisk utwórz
\end_layout

\begin_layout Description
Wtedy powinien zostać przeniesiony na stronę funcjonalności
\begin_inset Newline newline
\end_inset

i powinien widzieć 
\begin_inset Quotes sld
\end_inset

Zarządzanie Scenariuszami
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset

i powinien widzieć 
\begin_inset Quotes sld
\end_inset

umożliwić zarządzanie opisami funkcjonalności
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset

i powinien widzieć 
\begin_inset Quotes sld
\end_inset

klient lub programista
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset

i powinien widzieć 
\begin_inset Quotes sld
\end_inset

mieć możliwość zarządzania(dodawanie, edytowanie, usuwanie, przegladania)
 funkcjonalności
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset

i powinienem widzieć przycisk dodaj scenariusz
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Dodanie nowego opisu funcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie tworzenia opisu funkcjonalności
\end_layout

\begin_layout Description
Kiedy nacisnę przycisk utwórz
\end_layout

\begin_layout Description
Wtedy powinien zostać na stronie której byłem
\begin_inset Newline newline
\end_inset

i powinien widzieć błąd 
\begin_inset Quotes sld
\end_inset

tytuł pole nie może być puste
\begin_inset Quotes srd
\end_inset


\begin_inset Newline newline
\end_inset

i powinien widzieć błąd 
\begin_inset Quotes sld
\end_inset

cel pole nie może być puste
\begin_inset Quotes srd
\end_inset


\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Zobaczenie listy funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie głównej
\end_layout

\begin_layout Description
Kiedy kliknę link 'Funkcjonaności' w menu głównym
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć listę funkcjonalności 
\begin_inset Newline newline
\end_inset

i powinienem zobaczyć wyszukiwarkę 
\begin_inset Newline newline
\end_inset

i powinienem zobaczyć nawigacje paginacji
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęgladnia funkcjonalności ze wzgledu na date dodania
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie z listy funkcjonalności
\end_layout

\begin_layout Description
Kiedy wybiorę zakres 'od' z kalendarza '01.01.2009'
\begin_inset Newline newline
\end_inset

i wybiorę zakres 'do' z kalendarza '10.01.2009'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć funcjonalności dodane w okresie od '01.01.2009'
 do '10.01.2009'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Wejscie na strone funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na na stronie listy funkcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę na element listy
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć stronę funkcjonalności
\begin_inset Newline newline
\end_inset

i powinienem widzieć listę scenariuszy powiązanych
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przejście do Edycji opisu funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie funcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę w link edytuj
\end_layout

\begin_layout Description
Wtedy powinienm zostac przeniesiony na strone edycji
\begin_inset Newline newline
\end_inset

i powinienem widzieć formularz z wypełnionym polem 'tytuł'
\begin_inset Newline newline
\end_inset

i powinienem widzieć formularz z wypełnionym polem 'cel'
\begin_inset Newline newline
\end_inset

i powinienem widzieć formularz z wypełnionym polem 'jako'
\begin_inset Newline newline
\end_inset

i powinienem widzieć formularz z wypełnionym polem 'chce'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Edycja opisu funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie edycji funcjonalności
\end_layout

\begin_layout Description
Kiedy wpisze i 
\begin_inset Quotes sld
\end_inset

klient lub programista lub grafik
\begin_inset Quotes srd
\end_inset

 w pole 'jako'
\begin_inset Newline newline
\end_inset

i nacisnę przycisk 'aktualizuj'
\end_layout

\begin_layout Description
Wtedy powinienm zostac przeniesiony na strone funkcjonalności
\begin_inset Newline newline
\end_inset

i powinienem widzieć pole 'jako' wypełnione 
\begin_inset Quotes sld
\end_inset

klient lub programista lub grafik
\begin_inset Quotes srd
\end_inset


\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Usunięcie opisu funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie funcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę link usuń
\begin_inset Newline newline
\end_inset

i potwierdzę
\end_layout

\begin_layout Description
Wtedy powinienm zostac przeniesiony na strone listy funkcjonalności
\begin_inset Newline newline
\end_inset

i powinienem zobaczyć informacje 
\begin_inset Quotes sld
\end_inset

Funkcjonalność 'nazwa' została pomyślnie usunięta
\begin_inset Quotes srd
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Zarządzaniem scenariuszami
\end_layout

\begin_layout Description
Tytuł 
\bar under
Zarządzanie scenariuszami
\end_layout

\begin_layout Description
Cel Weryfikacja jednoznaczności zachowania danej funkcjonalności
\end_layout

\begin_layout Description
Jako klient lub programista
\end_layout

\begin_layout Description
Chcę mieć możliwość dodawanie, edytowanie, usuwanie, przegladania scenariuszy
 w kontekście danej funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Przejście na stronę nowy scenariusz
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie funkcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę przycisk dodaj nowy scenariusz
\end_layout

\begin_layout Description
Wtedy powinien zostać przeniesiony na stronę nowego scenariusza
\begin_inset Newline newline
\end_inset

i powinien widzieć tytuł funkcjonalności do której dodaje scenariusz
\begin_inset Newline newline
\end_inset

i powinien widzieć formularz `edycja scenariusz`
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Dodanie nowego scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na nowej stronie scenariusza danej funcjonalności
\end_layout

\begin_layout Description
Kiedy wprowadze 
\begin_inset Quotes sld
\end_inset

Usunięcie opisu funkcjonalności
\begin_inset Quotes srd
\end_inset

 w pole 'tytuł'
\begin_inset Newline newline
\end_inset

i wprowadze 
\begin_inset Quotes sld
\end_inset

jestem na stronie funcjonalności
\begin_inset Quotes srd
\end_inset

 w pole 'gdy'
\begin_inset Newline newline
\end_inset

i wprowadze 
\begin_inset Quotes sld
\end_inset

kliknę link usuń i potwierdzę
\begin_inset Quotes srd
\end_inset

 w pole 'kiedy'
\begin_inset Newline newline
\end_inset

i wprowadze 
\begin_inset Quotes sld
\end_inset

powinienm zostac przeniesiony na strone listy funkcjonalności
\begin_inset Quotes srd
\end_inset

 w pole 'wtedy'
\end_layout

\begin_layout Description
Wtedy powiniem zostan przeniesiony na strone funkcjonalności
\begin_inset Newline newline
\end_inset

i powinienem zobaczyć jako tytuł jednego elementu listy scenariuszy 
\begin_inset Quotes sld
\end_inset

Usunięcie opisu funkcjonalności
\begin_inset Quotes srd
\end_inset


\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Usunięcie scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie funcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę link usuń na elemencie listy scenariuszy
\begin_inset Newline newline
\end_inset

i potwierdzę
\end_layout

\begin_layout Description
Wtedy powinienem zostać na tej samej stronie
\begin_inset Newline newline
\end_inset

i powinienem zobaczyć komunikat 
\begin_inset Quotes sld
\end_inset

scenariusz #nazwa został usunięty
\begin_inset Quotes srd
\end_inset


\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Wejscie na strone scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na na stronie funkcjonalności
\end_layout

\begin_layout Description
Kiedy kliknę na element listy scenariuszy
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć stronę scenariusza
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przejście na stronę edycja scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy jestem na stronie scenariusza
\end_layout

\begin_layout Description
Kiedy kliknę przycisk edytuj scenariusz
\end_layout

\begin_layout Description
Wtedy powinien zostać przeniesiony na stronę edycji scenariusza
\begin_inset Newline newline
\end_inset

i powinien widzieć tytuł funkcjonalności do której edytuje scenariusz
\begin_inset Newline newline
\end_inset

i powinien widzieć formularz `edycja scenariusza`
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Historia zmian
\end_layout

\begin_layout Standard
w procesie agile, zmiany są mile wiedziane na każdym etapie - zgodnie z
 drugą zasadą monifestu agile - jednak klient bardzo często zapomina jak
 dużo zmian nastąpiło w całym procesie produkcji.
 Możliwość wykazania mu tych zmian jest niezwykle pomocna, gdy chcemy zwrócić
 uwagę na jakość produkcji - zmiany ulepszaja produkt, oraz gdy chodzi o
 kwestie finansowe.
\end_layout

\begin_layout Subsubsection
Prezentacja zmian poprzez archiwum
\end_layout

\begin_layout Description
Tytuł
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://github.com/aslakhellesoy/cucumber/blob/master/lib/cucumber/languages.yml
\end_layout

\end_inset

 
\bar under
Prezentajca histori zmian poprzez archiwum
\end_layout

\begin_layout Description
Cel Lepsza argumentacja jakości procesu, oraz jego kosztów
\end_layout

\begin_layout Description
Jako klient lub programista
\end_layout

\begin_layout Description
Chcę mieć możliwość przęgladniam zmian które nastepiły w funkcjonalnościach,
 dodane, usunięto, zmodyfikowane, kiedy i przez kogo
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie archiwum
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie z listą funkcjonalności
\end_layout

\begin_layout Description
Kiedy klikne na link archiwum
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 dodanie nowych czy to usunięciach funkcjonalności
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie archiwum ze względu na użytkownika
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie archiwum
\end_layout

\begin_layout Description
Kiedy wybiorę użytkownika 'Marek W.' z listy
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 dodanie nowych czy to usunięciach funkcjonalności którymi autorem jest
 'Marek W.'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie archiwum ze względu na czas wprowadzenia zmiany
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie archiwum
\end_layout

\begin_layout Description
Kiedy wybiorę zakres 'od' z kalendarza '15.01.2009'
\begin_inset Newline newline
\end_inset

i wybiorę zakres 'do' z kalendarza '29.01.2009'
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 dodanie nowych czy to usunięciach funkcjonalności które miały miejsce pomiedzy
 '15.01.2009' a '29.01.2009'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Różnice w kontekscie jednej zmiany
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie archiwum
\end_layout

\begin_layout Description
Kiedy kliknę na element listy zmian 
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć wersje wcześniejszą i aktualną
\begin_inset Newline newline
\end_inset

i powinny być zaznaczone różnice
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przeglądania konretnej zmiany
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie prezentująca zmiany pomiedzy dwiema wersjami
\end_layout

\begin_layout Description
Kiedy kliknę pokaż pełną historię obiektu
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 na konkretnym obiekcie(funkcjonalnośc, bądź scenariusz)
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Prezentacja zmian w funkcjonalnościach
\end_layout

\begin_layout Description
Tytuł 
\bar under
Prezentajca histori zmian w funkcjonalności
\end_layout

\begin_layout Description
Cel Lepsza argumentacja jakości procesu, oraz jego kosztów
\end_layout

\begin_layout Description
Jako klient lub programista
\end_layout

\begin_layout Description
Chcę mieć możliwość przęgladniam zmian które nastepiły w funkcjalności,
 oraz dodane, usunięto, zmodyfikowane scenariusze, kiedy i przez kogo
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Wejście do historii zmian funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie funkcjonalności
\end_layout

\begin_layout Description
Kiedy klikam na link historia zmian funkcjonalności
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 na konkretnym funkcjonalności
\begin_inset Newline newline
\end_inset

i zmiany na scenariusach powiązanych
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie historie zmian funkcjonalności ze względu na użytkownika
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie historii zmian funkcjonalności
\end_layout

\begin_layout Description
Kiedy wybiorę użytkownika 'Kasia W.' z listy
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje
 na funkcjonalności którymi autorem jest 'Kasia W.'
\begin_inset Newline newline
\end_inset

i scenariuszach którymi autorem jest 'Kasia W.'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie historii zmian w funkcjonalnościach ze względu na czas wprowadzenia
 zmiany
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie historii zmian funkcjonalności
\end_layout

\begin_layout Description
Kiedy wybiorę zakres 'od' z kalendarza '1.12.2008'
\begin_inset Newline newline
\end_inset

i wybiorę zakres 'do' z kalendarza '22.12.2008'
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje
 na funkcjonalnościach które miały miejsce pomiedzy '1.12.2008' a '22.12.2008'
\begin_inset Newline newline
\end_inset

i na scenariuszach powiązanych które miały miejsce pomiedzy '1.12.2008' a
 '22.12.2008'
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Prezentacja zmian w scenariuszach
\end_layout

\begin_layout Description
Tytuł 
\bar under
Prezentajca histori zmian w scenariuszach
\end_layout

\begin_layout Description
Cel Lepsza argumentacja jakości procesu, oraz jego kosztów
\end_layout

\begin_layout Description
Jako klient lub programista
\end_layout

\begin_layout Description
Chcę mieć możliwość przęgladniam zmian które nastepiły w scenariuszach,
 dodane, usunięto, zmodyfikowane, kiedy i przez kogo
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Wejście do historii zmian scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie scenariusza
\end_layout

\begin_layout Description
Kiedy klikne na link historia zmian scenariusza
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje,
 na konkretnym scenariuszu
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie historie zmian scenariusza ze względu na użytkownika
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie historii zmian scenariusza
\end_layout

\begin_layout Description
Kiedy wybiorę użytkownika 'Tomek B.' z listy
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje
 na scenariuszu którymi autorem jest 'Tomek B.'
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Przęglądanie historii zmian ze względu na czas wprowadzenia zmiany
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie historii zmian scenariusza
\end_layout

\begin_layout Description
Kiedy wybiorę zakres 'od' z kalendarza '1.12.2008'
\begin_inset Newline newline
\end_inset

i wybiorę zakres 'do' z kalendarza '22.12.2008'
\begin_inset Newline newline
\end_inset

i klikne link 'zastosuj filtr'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w porządku odwrotnym chronologicznie modyfikacje
 na scenariuszu które miały miejsce pomiedzy '1.12.2008' a '22.12.2008'
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsection
Spersonalizowane interfejsy
\end_layout

\begin_layout Standard
Celem systemu jest intuicyjnie oraz efektywny dostęp do najistotniejszych
 informacji na temat systemu specyfikowane ze względu na rolę użytkownika.
 Celem jest nie wprowadzanie klienta biznesowego w zakłopotanie - aby czuł
 się z narządziem swobodnie.
 Znów perspektywa dla programistów musi dostarczać dużo wiecej informacji,
 które są im potrzebne bardzo często w jednym widoku aby efektywnie wykonać
 swoją pracę
\end_layout

\begin_layout Subsubsection
Z punktu widzenia klienta biznesowego
\end_layout

\begin_layout Paragraph
możliwość dodawania nowych funkcjonalności
\end_layout

\begin_layout Paragraph
przegladanie historyjek w systemie
\end_layout

\begin_layout Paragraph
widzenie statusów historyjek, ich postępu
\end_layout

\begin_layout Paragraph
przeglądanie histori zmian
\end_layout

\begin_layout Paragraph
akceptowanie poszczególnych scenariuszy, calych funkcjonalności
\end_layout

\begin_layout Subsubsection
Dla menadżera projektu
\end_layout

\begin_layout Paragraph
śledzenie statusu, postępu w pracach
\end_layout

\begin_layout Paragraph
przeglądaniem zmian które nastąpiły w czasie rozwoju
\end_layout

\begin_layout Paragraph
wgląd w estymacje funkcjonalności, oraz rzeczywistego spędzonego czasu
\end_layout

\begin_layout Subsubsection
Dla programistów
\end_layout

\begin_layout Paragraph
przeglądanie, modyfikowanie, dodawanie nowych scenariuszy
\end_layout

\begin_layout Paragraph
wsparcie dla pisanie testów (generatory kodu, export do formatu historyjek
 cucumber)
\end_layout

\begin_layout Paragraph
export do systemu zarzadzania zadań
\end_layout

\begin_layout Subsection
wsparcie do automatycznych testów
\end_layout

\begin_layout Standard
Jest to możliwe dzięki przechowywaniu specyfikacji jak strukturę, dzięki
 której eksport do historyjek akceptowanych przez Cucumber nie będzie stanowić
 probelmu, a znacznie ułatwi to pisanie testów integracyjnych.
\end_layout

\begin_layout Description
Tytuł 
\bar under
Generowanie opowieści użytkownika w formacie Cucumber
\end_layout

\begin_layout Description
Cel Przygotowanie testów intergracyjnych
\end_layout

\begin_layout Description
Jako programista
\end_layout

\begin_layout Description
Chcę mieć możliwość utworzenia opowięści użytkownika dla poszczególnej funkcjona
lności badź scenariusza.
\end_layout

\begin_deeper
\begin_layout Description
Scenariusz 
\bar under
Utworzenie dla funkcjonalności
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie funkcjonalności
\end_layout

\begin_layout Description
Kiedy klikne na link eksportuj do formatu 'cucumber'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w nowej stronie funkcjonalność wraz z wszystkimi
 scenariuszami w formacie tekstowym utworzony na podstawie danych z funkcjonalno
ści i połączonych scenariuszy
\end_layout

\end_deeper
\begin_layout Description
Scenariusz 
\bar under
Utworzenie dla scenariusza
\end_layout

\begin_deeper
\begin_layout Description
Gdy Jestem na stronie scenariusza
\end_layout

\begin_layout Description
Kiedy klikne na link eksportuj do formatu 'cucumber'
\end_layout

\begin_layout Description
Wtedy powinienem zobaczyć w nowej stronie scenariusz w formacie tekstowym
 utworzony na podstawie danych z danego scenariusza
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Prezentacja aplikacji
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Podsumowanie
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AlanCooper.every.7.years"

\end_inset

 Alan Cooper - The Wisdom of Experience
\begin_inset Newline newline
\end_inset

http://www.cooper.com/journal/agile2008/ [slajd 19] - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto"

\end_inset

Agile Manifesto - official webpage
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Authors"

\end_inset

Agile Manifesto - Authors
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/authors.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Principles"

\end_inset

Principles behind the Agile Manifesto
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/principles.html- 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Tlumaczenie"

\end_inset

Tłumaczenie Agile Manifest
\begin_inset Newline newline
\end_inset

http://pl.wikipedia.org/wiki/Manifest_Agile - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ruby.homepage"

\end_inset

Oficjalna strona języka Ruby
\begin_inset Newline newline
\end_inset

http://www.ruby-lang.org/pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RoR.homepage"

\end_inset

Oficjalna strona frameworku Ruby on Rails
\begin_inset Newline newline
\end_inset

http://www.rubyonrails.pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rspec.homepage"

\end_inset

Oficjalna strona fremeworku Rspec
\begin_inset Newline newline
\end_inset

http://rspec.info - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Remarkable.wiki"

\end_inset

Wiki biblioteki Remarkable
\begin_inset Newline newline
\end_inset

http://wiki.github.com/carlosbrando/remarkable - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DRY.Interview.With.Dave.Thomas"

\end_inset

Orthogonality and the DRY Principle
\begin_inset Newline newline
\end_inset

http://www.artima.com/intv/dry.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.Author.Report"

\end_inset

The original MVC reports Trygve Reenskaug Dept.
 of Informatics University of Oslo
\begin_inset Newline newline
\end_inset

http://heim.ifi.uio.no/~trygver/2007/MVC_Originals.pdf - 13.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.smalltalk.beginning"

\end_inset

http://st-www.cs.uiuc.edu/users/smarch/st-docs/mvc.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.pattern.describe"

\end_inset

Interactive Application Architecture Patterns 
\begin_inset Newline newline
\end_inset

http://ctrl-shift-b.blogspot.com/2007/08/interactive-application-architecture.html
 - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.Author.Introduction"

\end_inset

Introducing BDD
\begin_inset Newline newline
\end_inset

http://dannorth.net/introducing-bdd - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.info"

\end_inset

Oficjlna strona o BDD
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.AllAboutBehaviour"

\end_inset

BDD - It's All Behaviour
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ItsAllBehaviour - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.BusinessValue"

\end_inset

BDD - Where's The Business Value
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/WheresTheBusinessValue - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.EnoughIsEnough"

\end_inset

BDD - Enough Is Enough
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/EnoughIsEnough - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.Stories"

\end_inset

BDD - Stories
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/Story - 18.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.BehaviourDrivenPrograming"

\end_inset

BDD - Behaviour Driven Programming
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/BehaviourDrivenProgramming
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.GettingTheWordsRight"

\end_inset

BDD - Getting The Words Right
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/GettingTheWordsRight - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.CostOfChange"

\end_inset

BDD - Cost Of Change
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/CostOfChange - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DaveAstel.Blog"

\end_inset

Dave Astel - Blog
\begin_inset Newline newline
\end_inset

http://blog.daveastels.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DavidChelimsky.Blog"

\end_inset

David Chelimsky - Blog
\begin_inset Newline newline
\end_inset

http://blog.davidchelimsky.net - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.RSPEC.FirstIntroduction"

\end_inset

Dave Astel - A New Look at Test Driven Development
\begin_inset Newline newline
\end_inset

http://techblog.daveastels.com/2005/07/05/a-new-look-at-test-driven-development
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.BDD.DaveAstel.Intro"

\end_inset

Dave Astel - BDD Intro
\begin_inset Newline newline
\end_inset

http://techblog.daveastels.com/files/BDD_Intro.pdf - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.community"

\end_inset

Rspec Core Team - Contribute
\begin_inset Newline newline
\end_inset

http://rspec.info/community - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.commit.history"

\end_inset

github - Rspec Commits History
\begin_inset Newline newline
\end_inset

http://github.com/dchelimsky/rspec/commits/master - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.rbehave.introduction"

\end_inset

Dan North - Introducting rbehave
\begin_inset Newline newline
\end_inset

http://dannorth.net/2007/06/introducing-rbehave - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Zach.Denis.Blog"

\end_inset

Zach Denis - Blog
\begin_inset Newline newline
\end_inset

http://continuousthinking.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Aslak.Hellesoy.Blog"

\end_inset

Aslak Hellesoy - Blog
\begin_inset Newline newline
\end_inset

http://blog.aslakhellesoy.com - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Bryan.Helmkapm.Blog"

\end_inset

Bryan Helmkamp - Blog
\begin_inset Newline newline
\end_inset

 http://www.brynary.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RSPEC.the.book"

\end_inset

The Pragmatic Programmer -The RSpec Book: Behaviour Driven Development with
 Ruby
\begin_inset Newline newline
\end_inset

http://www.pragprog.com/titles/achbd/the-rspec-book - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.StoryRunnerInPlainText"

\end_inset

David Chelimsky - Story Runner in Plain English
\begin_inset Newline newline
\end_inset

http://blog.davidchelimsky.net/articles/2007/10/21/story-runner-in-plain-english
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.Gherkin.spokenlanguege"

\end_inset

 Aslak Hellesoy - Cucumber spoken languages
\begin_inset Newline newline
\end_inset

http://github.com/aslakhellesoy/cucumber/blob/master/lib/cucumber/languages.yml
 - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.Gherkin"

\end_inset

Aslak Hellesoy - Cucumber: Gherkin
\begin_inset Newline newline
\end_inset

http://wiki.github.com/aslakhellesoy/cucumber/gherkin - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.wiki"

\end_inset

Oficjalna strona Cucumber
\begin_inset Newline newline
\end_inset

http://cukes.info/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.replacement.of.story.runner"

\end_inset

David Chelimsky - Cucumber
\begin_inset Newline newline
\end_inset

 http://blog.davidchelimsky.net/2008/9/22/cucumber - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ProgramingByBusinnessPeople"

\end_inset

Martin Fowler - Will DSLs allow business people to write software rules
 without involving programmers?
\begin_inset Newline newline
\end_inset

http://martinfowler.com/bliki/BusinessReadableDSL.html - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ruby.about.language"

\end_inset

Społeczność ruby - o Języku Ruby
\begin_inset Newline newline
\end_inset

http://www.ruby-lang.org/pl/about - 23.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "REST.roy.t.fielding.homepage"

\end_inset

Roy T.
 Fielding - Strona domowa
\begin_inset Newline newline
\end_inset

http://roy.gbiv.com/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "REST.author.explenation"

\end_inset

Roy Thomas Fielding - Architectural Styles and the Design of Network-based
 Software Architectures - Roy Thomas Fielding
\begin_inset Newline newline
\end_inset

CHAPTER 5 Representational State Transfer (REST)
\begin_inset Newline newline
\end_inset

http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ApacheFoundation"

\end_inset

The Apache Software Foundation
\begin_inset Newline newline
\end_inset

http://www.apache.org/
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Waterfall.introduction"

\end_inset

Royce W.W.
 - Managing the Development of Large Software Systems
\begin_inset Newline newline
\end_inset

http://www.cs.umd.edu/class/spring2003/cmsc838p/Process/waterfall.pdf - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SpiralModel.introduction"

\end_inset

Boehm B.
 - A Spiral Model of Software Development and Enhancement
\begin_inset Newline newline
\end_inset

http://www.cs.usu.edu/~supratik/CS%205370/r5061.pdf - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NBehave"

\end_inset

NBehave
\begin_inset Newline newline
\end_inset

http://code.google.com/p/nbehave/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NSpec"

\end_inset

NSpec
\begin_inset Newline newline
\end_inset

http://nspec.tigris.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NSpecify"

\end_inset

NSpecify
\begin_inset Newline newline
\end_inset

http://nspecify.sourceforge.net/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "NUnit"

\end_inset

Nunit
\begin_inset Newline newline
\end_inset

http://www.nunit.org - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "instinct"

\end_inset

Instinct
\begin_inset Newline newline
\end_inset

http://code.google.com/p/instinct/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JBehave"

\end_inset

JBehave
\begin_inset Newline newline
\end_inset

http://jbehave.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "JDave"

\end_inset

JDave
\begin_inset Newline newline
\end_inset

http://www.jdave.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Jspec"

\end_inset

JSpec
\begin_inset Newline newline
\end_inset

http://wiki.github.com/visionmedia/jspec
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "CSpec"

\end_inset

CSpec
\begin_inset Newline newline
\end_inset

http://wiki.github.com/arnaudbrejeon/cspec/home
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Specs"

\end_inset

Specs
\begin_inset Newline newline
\end_inset

http://code.google.com/p/specs/
\end_layout

\end_body
\end_document
