#LyX 1.6.1 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options false
\language polish
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
Bielska Wyższa Szkoła
\begin_inset Newline newline
\end_inset

im.
 Józefa Tyszkiewicza 
\begin_inset Newline newline
\end_inset

w Bielsku-Białej
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.3in
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/mczyz/bwsb.png

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Praca Dyplomowa
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center
Michał Czyż
\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Temat Pracy: Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Opiekun
\begin_inset space ~
\end_inset

pracy: dr.
 M.
 Smołka
\end_layout

\begin_layout Description
\paragraph_spacing single
Ocena
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

albumu: 2288
\end_layout

\begin_layout Description
\paragraph_spacing single
Numer
\begin_inset space ~
\end_inset

ewidencyjny
\begin_inset space ~
\end_inset

pracy:
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.2in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
Bielsko-Biała, 2009
\end_layout

\begin_layout Standard

\lang english
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Standard
\align right
Bielsko-Biała dn.
 15 lutego 2009
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Description
\paragraph_spacing single
Imię
\begin_inset space ~
\end_inset

i
\begin_inset space ~
\end_inset

nazwisko: Michał Czyż
\end_layout

\begin_layout Description
\paragraph_spacing single
Nr
\begin_inset space ~
\end_inset

albumu: 2288 
\end_layout

\begin_layout Description
\paragraph_spacing single
Wydział: Zarządzania i Informatyki 
\end_layout

\begin_layout Description
\paragraph_spacing single
Kierunek: Inżynieria Oprogramowania
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.5in
\end_inset


\end_layout

\begin_layout Standard
\align center

\series bold
OŚWIADCZENIE
\end_layout

\begin_layout Standard
Świadom odpowiedzialności prawnej oświadczam, że złożona praca inżynierska
 pt.: 
\series bold
Zwinne zarządzanie wymaganiami w procesie produkcji oprogramowania
\series default
 została napisana przeze mnie samodzielnie.
 
\end_layout

\begin_layout Standard
Równocześnie oświadczam, że praca ta nie narusza prawa autorskiego w rozumieniu
 ustawy z dnia 4 lutego 1994 roku o prawie autorskim i prawach pokrewnych
 (Dz.U.1994 nr 24 poz.
 83) oraz dóbr osobistych chronionych prawem cywilnym.
\end_layout

\begin_layout Standard
Ponadto praca nie zawiera informacji i danych uzyskanych w sposób nielegalny
 i nie była wcześniej przedmiotem innych procedur urzędowych związanych
 z uzyskaniem dyplomów lub tytułów zawodowych uczelni wyższej.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Section
Wstęp
\end_layout

\begin_layout Standard
Właściwe zarządzanie wymaganiami które ma spełniać oprogramowanie a którym
 źródłem jest osoba zamawiając ma strategiczne znaczenie aby produkt spełniał
 oczekiwania użytkownika końcowego.
 Biorąc pod uwagę doświadczenia innych <#TODO znaleźć referencje do książki,
 artykule>, oraz własne można powiedzieć ze jest to zadanie nie łatwe.
\end_layout

\begin_layout Standard
Przez okres ostatnich 40 lat promowane były najróżniejsze metody zarządzaniem
 projektem, według Alan Cooper średnio co 7 lat
\begin_inset CommandInset citation
LatexCommand cite
key "AlanCooper.every.7.years"

\end_inset

 zmienia się metodologia tworzenia oprogramowania.
 Począwszy na schematach blokowych a kończąc na zwinnym procesie tworzenia
 oprogramowania.
 Oczywiście nie ma srebrnej kuli, nie ma dotychczas rozwiązań które zapewniały
 by idealne rozwiązanie dla każdej sytuacji.
 Na co warto zwrócić uwagę w przypadku metodologi zwinnych to że różnią
 się znacznie od swych poprzedników, jest to pierwsza metodologia której
 zasady nie skupiają się na narzędziach i sztywnych regułach.
 Pomiędzy 11 a 14 Lutego 2001 przedstawiciele
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Authors"

\end_inset

 wielu idei jak extreme programming - Kent Beck, pragmatic programing -
 Dave Thomas, Andrew Hunt, SCRUM - Jeff Sutterland, crystal clear - Alistair
 Cockburn, adaptive software development - Jim Highsmith, oraz 11 innych
 doświadczonych programistów którzy podpisali się pod 'Agile Manifesto'
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto"

\end_inset

.
 Właśnie od jego nazwy wzięła się nazwa - metodologia zwinna (agile development).
 Manifest ten brzmi następująco.
\end_layout

\begin_layout Quote
Poprzez wytwarzanie oprogramowania oraz pomaganie innym w tym zakresie odkrywamy
 lepsze sposoby realizowania tej pracy.
 W wyniku tych doświadczeń zaczęliśmy przedkładać: 
\end_layout

\begin_layout Quote

\emph on
Jednostki i współdziałania między nimi 
\emph default
nad procesy i narzędzia.
 
\end_layout

\begin_layout Quote

\emph on
Działające oprogramowanie
\emph default
 nad dokładną dokumentację.
 
\end_layout

\begin_layout Quote

\emph on
Współpracę z klientem
\emph default
 nad negocjację umów.
 
\end_layout

\begin_layout Quote

\emph on
Reagowanie na zmiany
\emph default
 nad realizowanie planu.
\end_layout

\begin_layout Quote
Oznacza to, że wprawdzie doceniamy to co wymieniono po prawej stornie to
 jednak bardziej cenimy to co wymieniono po lewej.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Tlumaczenie"

\end_inset


\end_layout

\begin_layout Standard
Ja również podpisuje się pod tym dokumentem, w dalszym ciągu widze zastosowanie
 dla wcześniejszych metodologi, aczkolwiek skłonny jestem w większym stopniu
 skupiać się na współdziałaniu z klientem oraz reagowanie na zmiany (od
 strony klienta bądź zespołu), traktować decyzje jako tymczasowe.
 Przekładania zaimplementowanie malej funkcjonalności ponad bardzo szczegółową
 dokumentacje (BDUF
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Big Design Up Front - metodologia zakładająca stworzenie kompletnej dokumentacji
 przed rozpoczęciem prac implementacyjnych, zakłada ona że bez developerzy
  wstanie przewidziec rozwiązanie bez potrzeby budowania prototypów, bez
 napisania fragmentu kodu
\end_layout

\end_inset

).
 Zasady Agile Development
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset

 zwracają największą uwagę że najważniejsza jest użyteczność produkowanego
 oprogramowania, nawet jeśli wymusza to zmiany w późnym stadium produkcji.
 Kładą one nacisk na minimalizm, oraz na ciągłe usprawnianie procesu - częste
 retrospekcje połączone z wprowadzaniem zmian w sposobie tworzenia oprogramowani
a.
\end_layout

\begin_layout Standard
Największym problemem we wdrożeniu jest namówienie klienta na tą formę współprac
y, pamiętajmy że klient musi być integralną częścią zespołu, bierze czynny
 udział w procesie wytwarzania.
 Powodów takiej sytuacji jest wiele.
 Począwszy o prozaicznego, ludzie z założenia nie lubią zmian.
 Drugą sprawą jest kwestia rozliczenia kosztu systemu.
 Menadżerowie chcą wiedzieć ile projekt będzie kosztować, niestety w metodologi
 agile nie jest możliwe określenie ceny końcowego produktu.
 Argumentami które mogą przekonać jest podkreślenie jakości produktu, oraz
 efektu końcowego który można uzyskać przy określonym budżecie.
 A biorąc pod uwagę SCRUM, częste prezentacja efektów są równie ważne.
\end_layout

\begin_layout Standard
Jedną z ważniejszych kwestii jest możliwość wykazanie klientowi ile kwestii
 uległo zmianie w ciągu procesu, dzięki temu dużo łatwiej będzie wiedział
 jak lepszy stał się produkt (dana funkcjonalność) względem jego pierwotnych
 założeń i wyobrażeń, oraz dla nas developerów będzie możliwe uzasadnienie
 kosztu uzyskanie danej funkcjonalności.
 I oto tutaj pojawia się moja idea, bardzo prostego narzędzia które będzie
 wspierało ten proces.
\end_layout

\begin_layout Standard
Założeniem tej pracy jest przedstawienie procesu zbierania zapotrzebowań
 oraz zmian które pojawiają się w trakcie z użyciem prostych historyjek,
 wraz opisaniem narzędzia i technologi pomocniczych które znacznie usprawniają
 i zwiększają jakość tworzonego oprogramowania.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Streszczenie
\end_layout

\begin_layout Standard
W pierwszej części zwrócę większą uwagą na istniejące metodologie jakie
 metoda wodospadów oraz spiralny model.
 Sprobuje przedstawić idea tych modeli gdzie znajdowały one swe zastosowanie,
 i jaką zbierają krytykę, szczególnie z środowisk Agile.
 Następnie bardzo dokładnie przyjrzymy się podejściu agile, oraz związanych
 z nią bardziej szczegółowych metodologi.
 Poruszona będzie również że nie każda faza procesu tworzenia aplikacji
 może być agile, gdyż są fazy które nie mogą być agile, bądź nie wolno pozwolić
 aby takie były.
\end_layout

\begin_layout Standard
W Procesie wytwarzania oprogramowania w ten sposób - częste zmiany, wyrzucanie
 fragmentów kodu - krytyczne znaczenie mają technologie których się używa
 jak również koncepcje działania.
 Omówiony będzie w tym bardzo elastyczny obiektowy język funkcyjny jakim
 jest Ruby
\begin_inset CommandInset citation
LatexCommand cite
key "Ruby.homepage"

\end_inset

.
 Framework do budowania aplikacji webowych Ruby on Rails
\begin_inset CommandInset citation
LatexCommand cite
key "RoR.homepage"

\end_inset

.
 Zostaną też dosyć dokładnie omówione frameworki wspomagające pisanie testów
 takie jak Rspec
\begin_inset CommandInset citation
LatexCommand cite
key "Rspec.homepage"

\end_inset

 i Cucumber
\begin_inset CommandInset citation
LatexCommand cite
key "Cucumber.wiki"

\end_inset

, Remarkable
\begin_inset CommandInset citation
LatexCommand cite
key "Remarkable.wiki"

\end_inset

.
 Z tymi narzędziami wiążą się takie pojęcia jak MVC
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Model-view-controller
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report,MVC.smalltalk.beginning,MVC.pattern.describe"

\end_inset

, REST
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Representational State Transfer 
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "REST.author.explenation"

\end_inset

, DRY
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't Repeat Yourself
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "DRY.Interview.With.Dave.Thomas"

\end_inset

, <#TODO ?del>KISS
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Keep it Small & Simple
\end_layout

\end_inset

, BDD
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Behavior Driven Development
\end_layout

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "BDD.info"

\end_inset

 - które postaram się jak najlepiej przedstawić.
 Jedną z ciekawszych części będą narzędzia do generowania 'fałszywych' danych,
 dzięki którym testowanie jest efektywniejsze.
 <#Todo odnosnik do sekcji>
\end_layout

\begin_layout Standard
Kolejna część będzie próba uargumentowaniem perspektyw które uważam za niezbędne
 aby z tego narzędzia mogli efektywnie skorzystać osoby zamawiające oprogramowan
ie, nadzorujący prace a zwłaszcza projektanci interfejsów i developerzy.
 Następnie przedstawię techniczne rozwiązania zawarte w projekcie, zwrócę
 uwagę na sposób zaprojektowania bazy danych, wpływu na wydajność systemu.
 Ciekawym elementem będą również przykłady napisanych testów które postaram
 się przedstawić w sposób aby jeszcze lepiej można było zrozumieć zasadę
 BDD
\end_layout

\begin_layout Standard
Ostatnim etapem tej pracy jest prezentacja możliwości aplikacji, krok po
 kroku dla każdej z perspektyw.
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Historia zarządzania wymagań
\end_layout

\begin_layout Subsection
metody 'cieżkie'
\end_layout

\begin_layout Subsubsection
metoda wodospadów
\end_layout

\begin_layout Subsection
Filozofia Agile
\end_layout

\begin_layout Subparagraph
Iteracyjny proces wytwarzania
\end_layout

\begin_layout Subparagraph
YAGNI
\end_layout

\begin_layout Subparagraph
Najprostrza rzecz która działa
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Technologie i wzorce projektowe
\end_layout

\begin_layout Standard
Przy motodologi agile bardza istone jest jakie narzędzia wybierzemy, oraz
 jakich wzorców musimy się bezwzglednie trzymać aby produkcja była efektywna.
 Wynika go z charakteru pracy, musimy być ciągle otwarci na zmieny zgłaszane
 przez klienta, oraz developerów.
 Zmiany ze strony klienta są nieuniknione, a mowiac bardziej precyzyjnie
 są niezbędne aby produkt był wartościowy.
 Zmiany które wychodzą od strony developerów czy to programistyczne, czy
 to związane z interfejsem użytkownika, są równie częste gdyż projekt na
 osi czasu ewoluje, znajdujemy lepsze, efektywniejsze rozwiązania.
 Wymaga to aby kod był dobrze utrzymany, bez redundantności, przejżysty
 i jednoznaczny.
 Poniżej zwrócę uwagę na sprawdzone wzorce które umożliwiają osiągnąć ten
 cel.
\end_layout

\begin_layout Subsection
MODEL-VIEW-CONTROLLER
\end_layout

\begin_layout Standard
Wzorzec MVC ma już za sobą prawie 30 lat, został opracowany przez norwega
 Trygve Renskaug na Uniwersytecie w Oslo na przełomie lat 1978-79.
 Pierwotna nazwa brzmiała THING-MODEL-VIEW-EDITOR, końcową nazwę zawdzięczamy
 dyskusji autora z Adele Goldberg, dzięki której 10 grudnia 1979 przyjęto
 ostateczną nazwę.
 O samej przyczynie zainstnienia tego wzorca sam autor mówi 'MVC powstało
 jako naturalne rozwiazanie dla powszechnego problemu dostarczenia użytkonikom
 kontroli nad ich własnymi danymi z wielu perspektyw'
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

.
 Wskazuje to na idee odzielenia samych danych i sposobu ich prezentacji
 oraz modyfikacji, co jest w założeniu proste oraz logiczne.
 Zwróćmy uwagę dokładniej na poszczególne elementy oraz interakcje między
 nimi.
 
\end_layout

\begin_layout Paragraph
MODEL
\end_layout

\begin_layout Standard
Model jako abstrakcyjna forma reprezentacja encji jest ważnym aspektem izolacji.
 Cześć systemu kwalifikowana jako model można przedstawic jako zestaw atrybutów,
 informacje które przechowuje oraz logike biznesową która jednoznacznie
 okręśla zachowanie.
 Zgodnie z definicja wzorca model nie ma bezpośredniego dostępu do kontrolera
 czy widoku.
 Jeśli próby przechowywanie informacji poza modelem wydają sie dziwne i
 rzadko spotykane, to umieszczanie logiki w kontrolerach czy też widokach
 jest dosyc powszechną patologią która powoduje duże problemy w momencie
 prób optymalizacji czy też w okresie pięlegnacji kodu.
 Doświadczenie pokazuje że trzymanie się ściśle prostych dwóch reguł daje
 znaczne korzyści dla procesu produkcji oprogramowania.
 Łatwiej jest uniknąc redundancji kodu, oraz optymalizacja kodu jest możliwa
 efektywniej.
 Ma to duże znaczenie zwłaszcza w aplikacjach webowych gdzie mnogość form
 prezentacji danych wymaga jednoznacznie określonej logiki na poziomie modelu.
\end_layout

\begin_layout Paragraph
VIEW
\end_layout

\begin_layout Standard
Widok jest jednoznacznie odpowiedzialny za reprezentacje wizualna danych,
 oraz interfejsów edycyjnych.
 Pierwotana dofinicja
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.Author.Report"

\end_inset

 zakładała że widok jest bezpośrednio powiązany z modelem.
 The Passive View Pattern zakłada że widok ma dostęp do modelu tylko za
 pomocą kontrolera - nie występuje bezpośrednie odwołanie do modelu.
 Celem jest aby widok prezentował dane, bez znajomości co znajduje sie w
 modelu - jego celem jest prezentacja danych które dostarcza mu kontroler.
 Jedyna logika jaka może tutaj występować to ta związana z kontrolkami których
 zachowanie nie jest bezpośrednio związane z logiką biznesową.
\end_layout

\begin_layout Paragraph
CONTROLLER
\end_layout

\begin_layout Standard
Kontroler ma spełniać dwa proste zadania, przyjąc komunikat od użytkownika
 i przygotowac dane zwrotne.
 W kwesti pierwszej funkcjonalności rolą kontrolera jest aby przyjąc informacje
 od użytkownika, przekazac komunikat razem z danymi do odpowiedniego modelu
 przyjac wynik ktory model zwrocił, przygotowane dane przeslac do odpowiedniego
 widoku.
 Dla aplikacji webowych dochodzą kwestie jak autentykacja, oraz kwestie
 własnościowe obiektów.
\end_layout

\begin_layout Standard
#TODO wykres zależności
\end_layout

\begin_layout Standard
Pilnowanie aby nie wychodzic poza kompetencje owocuje duża niezależnosci
 poszczególnych kompomentów, oraz duże możliwości rozwoju aplikacji bez
 naruszania wcześniejszych elementów
\end_layout

\begin_layout Standard
<#TODO, wiecej info, - Szczególnie zwróce uwagę na wariację MVP
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Model-View-Presenter
\end_layout

\end_inset

 - The Passive View Patern
\begin_inset CommandInset citation
LatexCommand cite
key "MVC.pattern.describe"

\end_inset

, gdyż najlepiej wpisuje się on gdy patrzymy przez pryzmat aplikacji webowych>
\end_layout

\begin_layout Subsection
Don't Repeat Yourself
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Quote
Welcome changing requirements, even late in development.
 Agile processes harness change for the customer's competitive advantage.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Druga reguła Agile zacytowana powyżej stwierdza, że zmiany są mile widziane
 na każdym etapie pracy, nawet na tym bardzo zaawansowanym.
 Jedną z zasad która ułatwia taki cykl obróbki kodu - czasem wręcz tylko
 dzięki stosowaniu się do niej jest to możliwe - jest unikanie duplikacji
 kodu.
 Pomocna przy tym jest reguła DRY
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Don't Repeat Yourself, znana również jako Single Point of Truth
\end_layout

\end_inset

 zwraca ona uwagę na coś więcej niż tylko niepowtarzaniu kodu.
 Jak zwrócił Dave Thomas
\begin_inset CommandInset citation
LatexCommand cite
key "DRY.Interview.With.Dave.Thomas"

\end_inset

 to nie jest prawdziwa jej idea, sednem sprawy tej reguły jest aby każda
 cześc wiedzy systemu miała jedną autoratywną i jednoznaczną reprezentacje.
 Wiedza na temat systemu jak zwrócił w wywiadzie wychodzi ponad sam kod
 aplikacji, dotyczy ona schamatu baz danych, kwesti testów a nawet dokumentacji.
 Czasem aby móc osiągnać taki stan potrzebne są generatory kodu wiążace
 się z zawansowanymi technikami meteprogramowania lecz własnie dzieki stosowaniu
 się to tej reguły jesteśmy wstanie uzystkać elastyczny i dający się pięlegnować
 system.
\end_layout

\begin_layout Subsection
Behavior Driven Development
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Quote
Business people and developers must work together daily throughout the project.
\begin_inset CommandInset citation
LatexCommand cite
key "AgileManifesto.Principles"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
BDD to technika produkcji oprogramowania która kładzie duży nacisk na współpracę
 pomiędzy programistami a ludźmi związanymi z biznesem - tymi którzy zamawiają
 system jak również z tymi którzy będą go używać, jest to zgodne z regułą
 agile manifest zacytowanej powyżej.
 Dan North
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
http://dannorth.net/ - oficjalny blog
\end_layout

\end_inset

 zaprezentował poraz pierwszy tą koncepcje w 2003 roku
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.Author.Introduction"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
http://www.flickr.com/photos/obie/421149993/
\end_layout

\end_inset

.
 Jak sama nazwa wskazuje zachowanie systemu jest najważniejszą kwestią w
 trakcie produkcji.
 Autor zwrócił szczęgólną uwagę na kwestię, wartości biznesowej którą wniesie
 implementacja konkretnego zachowanie w systemie - gdyż to jest najważniejsze
 z punktu widzenie użytkowników systemu.
 Ciekawe jest też jego podejście jak determinować którą rzecz powinniśmy
 implementować, sugeruje że powinniśmy sobie zadać pytanie 'Jaka jest kolejną
 najważniejsza cecha której system nie posiada?', wydaje sie banalne aczkolwiek
 daje najlepsze rezultaty dla investorow, a zwłaszcza końcowych użytkowników.
\end_layout

\begin_layout Standard
Zgodnie z tym Dan North przestawił
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.info"

\end_inset

 trzy główne założenia BDD którym przyjżymy się teraz każdej z osobna i
 dokładniej.
\end_layout

\begin_layout Paragraph
Najważniejszy jest opis zachowania systemu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.AllAboutBehaviour"

\end_inset


\end_layout

\begin_layout Standard
Ta reguła zwraca uwagę że najważniejsze jest aby wiedzieć jak system ma
 sie zachować, jakie funkcjonalności ma udostępniać dla użytkownika.
 Zapis funkcjonalności w ten sposób - opis zachowanie - jest uwarunkowany
 potrzebą jednoznacznego rozumienia słów - efektu jaki mają mieć na system
 - tak aby programiści jak i ludzi związani z biznesem wzajemnie się rozumieli.
 Wykorzystuje się do tego celu historyjki użytkownika, które są narracją
 interakcji użytkownika z systemem, dokładniej zostaną omówione później.
\end_layout

\begin_layout Paragraph
System udostepnia pewne zachowanie ponieważ wnosi ono wartość dla biznesu
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.BusinessValue"

\end_inset


\end_layout

\begin_layout Standard
Jest dosyć częstym błedem gdy w systemie pojawiają się nowe funkcjonalści
 badź zostają użyte technologie, tylko dlatego że sprawiają wrażenie interesując
ych, jest to pewnego rodzaju patologia występująca w produkcji oprogramowania.
 Zwrócenie uwagi na wartość biznesową ma ogromny wpływ na efektywność oraz
 koszt związany z systemem, choć zazwyczaj nie jest to sprawa oczywista
 ani nie jest to postrzegane jako rzecz niezbędna, na co zwraca uwagę Dan.
\end_layout

\begin_layout Paragraph
Opierać się na wiedzy, a nie przewidywaniach
\begin_inset CommandInset citation
LatexCommand cite
key "BDD.EnoughIsEnough"

\end_inset


\end_layout

\begin_layout Standard
Domena metodologi BDUF zakłada że jesteśmy wstanie zapisać wszystkie informajce
 na temat systemu przed rozpoczęciem jego realizacji, innymi słowy jesteśmy
 wstanie przewidzieć wszystko na temat systemu - jednak bardzo często tak
 nie jest.
 Warto zwrócić uwagę na fakt im dłuższy okres chcemy przewidzieć oraz im
 bardziej złożony jest problem tym wiekszę prawdopodobieństwo że nasze założenia
 będą błądne.
 Taka postawa - posiadania wiedzy na początku - wynika również z obawy przed
 potencjalnym kosztem zmiany, menadżerowie są w tym najlepszym przykładem.
 BDUF się nie sprawdziło gdyż zmiany zawsze się pojawiają.
 BDD z założenie zabrania modelowania systemu przez zgadywania, a minimalizacja
 kosztu zmian jest uzyskiwana poprzez utrzymanie technicznie systemu w taki
 sposób aby łatwo można było w nim zmiany wprowadzać.
 W sekcji 'Filozofia Agile' zwrócona uwagę na metologie która to umożliwiają,
 takie jak iteracyjny proces produkcji, najprostsza rzecz która działa oraz
 nie implementowanie funkcjonalności które nie są wymagane.
\end_layout

\begin_layout Subsubsection
Historyjki użytkonika
\end_layout

\begin_layout Subsubsection
Automatyczne testowanie zachowania systemu
\end_layout

\begin_layout Subsection
RSPEC
\end_layout

\begin_layout Subsubsection
Cucumber
\end_layout

\begin_layout Subsection
REST
\end_layout

\begin_layout Subsection
Ruby
\end_layout

\begin_layout Subsection
Ruby on Rails
\end_layout

\begin_layout Subsubsection
Active Record
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Wspomaganie procesu produkcji oprogramowania
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Prezentacja aplikacji
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Dalsze plany rozwoju
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Section
Podsumowanie
\end_layout

\begin_layout Standard
\begin_inset Newpage clearpage
\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AlanCooper.every.7.years"

\end_inset

 Alan Cooper - The Wisdom of Experience
\begin_inset Newline newline
\end_inset

http://www.cooper.com/journal/agile2008/ [slajd 19] - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto"

\end_inset

Agile Manifesto - official webpage
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Authors"

\end_inset

Agile Manifesto - Authors
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/authors.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Principles"

\end_inset

Principles behind the Agile Manifesto
\begin_inset Newline newline
\end_inset

http://agilemanifesto.org/principles.html- 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AgileManifesto.Tlumaczenie"

\end_inset

Tłumaczenie Agile Manifest
\begin_inset Newline newline
\end_inset

http://pl.wikipedia.org/wiki/Manifest_Agile - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Ruby.homepage"

\end_inset

Oficjalna strona języka Ruby
\begin_inset Newline newline
\end_inset

http://www.ruby-lang.org/pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RoR.homepage"

\end_inset

Oficjalna strona frameworku Ruby on Rails
\begin_inset Newline newline
\end_inset

http://www.rubyonrails.pl/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Rspec.homepage"

\end_inset

Oficjalna strona fremeworku Rspec
\begin_inset Newline newline
\end_inset

http://rspec.info - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Cucumber.wiki"

\end_inset

Wiki biblioteki Cucumber
\begin_inset Newline newline
\end_inset

http://wiki.github.com/aslakhellesoy/cucumber - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Remarkable.wiki"

\end_inset

Wiki biblioteki Remarkable
\begin_inset Newline newline
\end_inset

http://wiki.github.com/carlosbrando/remarkable - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "REST.author.explenation"

\end_inset

Architectural Styles and the Design of Network-based Software Architectures
 - Roy Thomas Fielding
\begin_inset Newline newline
\end_inset

CHAPTER 5 Representational State Transfer (REST)
\begin_inset Newline newline
\end_inset

http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "DRY.Interview.With.Dave.Thomas"

\end_inset

Orthogonality and the DRY Principle
\begin_inset Newline newline
\end_inset

http://www.artima.com/intv/dry.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.Author.Report"

\end_inset

The original MVC reports Trygve Reenskaug Dept.
 of Informatics University of Oslo
\begin_inset Newline newline
\end_inset

http://heim.ifi.uio.no/~trygver/2007/MVC_Originals.pdf - 13.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.smalltalk.beginning"

\end_inset

http://st-www.cs.uiuc.edu/users/smarch/st-docs/mvc.html - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MVC.pattern.describe"

\end_inset

Interactive Application Architecture Patterns 
\begin_inset Newline newline
\end_inset

http://ctrl-shift-b.blogspot.com/2007/08/interactive-application-architecture.html
 - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.Author.Introduction"

\end_inset

Introducing BDD
\begin_inset Newline newline
\end_inset

http://dannorth.net/introducing-bdd - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.info"

\end_inset

Oficjlna strona o BDD
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ - 10.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.AllAboutBehaviour"

\end_inset

BDD - It's All Behaviour
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/ItsAllBehaviour - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.BusinessValue"

\end_inset

BDD - Where's The Business Value
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/WheresTheBusinessValue - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.EnoughIsEnough"

\end_inset

BDD - Enough Is Enough
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/EnoughIsEnough - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.GettingTheWordsRight"

\end_inset

BDD - Getting The Words Right
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/GettingTheWordsRight - 17.01.2009
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BDD.CostOfChange"

\end_inset

BDD - Cost Of Change
\begin_inset Newline newline
\end_inset

http://behaviour-driven.org/CostOfChange - 17.01.2009
\end_layout

\end_body
\end_document
